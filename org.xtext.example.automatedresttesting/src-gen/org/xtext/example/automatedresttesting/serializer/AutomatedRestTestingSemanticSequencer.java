/*
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.example.automatedresttesting.serializer;

import automatedresttesting.Assertion;
import automatedresttesting.Attribute;
import automatedresttesting.AutomatedRestTesting;
import automatedresttesting.AutomatedresttestingPackage;
import automatedresttesting.DomainAttribute;
import automatedresttesting.Entity;
import automatedresttesting.Expression;
import automatedresttesting.RestService;
import automatedresttesting.Restriction;
import automatedresttesting.SimpleEntity;
import automatedresttesting.Test;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.automatedresttesting.services.AutomatedRestTestingGrammarAccess;

@SuppressWarnings("all")
public class AutomatedRestTestingSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AutomatedRestTestingGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AutomatedresttestingPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AutomatedresttestingPackage.ASSERTION:
				sequence_Assertion(context, (Assertion) semanticObject); 
				return; 
			case AutomatedresttestingPackage.ATTRIBUTE:
				sequence_Attribute_Impl(context, (Attribute) semanticObject); 
				return; 
			case AutomatedresttestingPackage.AUTOMATED_REST_TESTING:
				sequence_AutomatedRestTesting(context, (AutomatedRestTesting) semanticObject); 
				return; 
			case AutomatedresttestingPackage.DOMAIN_ATTRIBUTE:
				sequence_DomainAttribute(context, (DomainAttribute) semanticObject); 
				return; 
			case AutomatedresttestingPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case AutomatedresttestingPackage.EXPRESSION:
				sequence_Expression(context, (Expression) semanticObject); 
				return; 
			case AutomatedresttestingPackage.PARAMETER:
				sequence_Parameter(context, (automatedresttesting.Parameter) semanticObject); 
				return; 
			case AutomatedresttestingPackage.REST_SERVICE:
				sequence_RestService(context, (RestService) semanticObject); 
				return; 
			case AutomatedresttestingPackage.RESTRICTION:
				sequence_Restriction(context, (Restriction) semanticObject); 
				return; 
			case AutomatedresttestingPackage.SIMPLE_ENTITY:
				sequence_SimpleEntity(context, (SimpleEntity) semanticObject); 
				return; 
			case AutomatedresttestingPackage.TEST:
				sequence_Test(context, (Test) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Assertion returns Assertion
	 *
	 * Constraint:
	 *     (dataToTest=[Element|EString] condition=Expression)
	 */
	protected void sequence_Assertion(ISerializationContext context, Assertion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AutomatedresttestingPackage.Literals.ASSERTION__DATA_TO_TEST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AutomatedresttestingPackage.Literals.ASSERTION__DATA_TO_TEST));
			if (transientValues.isValueTransient(semanticObject, AutomatedresttestingPackage.Literals.ASSERTION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AutomatedresttestingPackage.Literals.ASSERTION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAssertionAccess().getDataToTestElementEStringParserRuleCall_2_0_1(), semanticObject.eGet(AutomatedresttestingPackage.Literals.ASSERTION__DATA_TO_TEST, false));
		feeder.accept(grammarAccess.getAssertionAccess().getConditionExpressionParserRuleCall_3_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Attribute returns Attribute
	 *     Attribute_Impl returns Attribute
	 *
	 * Constraint:
	 *     (type=AttributeType isArray?='['? name=EString)
	 */
	protected void sequence_Attribute_Impl(ISerializationContext context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AutomatedRestTesting returns AutomatedRestTesting
	 *
	 * Constraint:
	 *     (url=EString (dataElements+=Element dataElements+=Element*)? (services+=RestService services+=RestService*)? (tests+=Test tests+=Test*)?)
	 */
	protected void sequence_AutomatedRestTesting(ISerializationContext context, AutomatedRestTesting semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DomainAttribute returns DomainAttribute
	 *
	 * Constraint:
	 *     (type=AttributeType isArray?='['? name=EString (primaryKey?='PK'? restrictions+=Restriction)?)
	 */
	protected void sequence_DomainAttribute(ISerializationContext context, DomainAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Entity
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     (name=EString entityAttributes+=DomainAttribute entityAttributes+=DomainAttribute*)
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Expression
	 *
	 * Constraint:
	 *     (relationalOperator=RelationalOperator expectedValue=EString)
	 */
	protected void sequence_Expression(ISerializationContext context, Expression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AutomatedresttestingPackage.Literals.EXPRESSION__RELATIONAL_OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AutomatedresttestingPackage.Literals.EXPRESSION__RELATIONAL_OPERATOR));
			if (transientValues.isValueTransient(semanticObject, AutomatedresttestingPackage.Literals.EXPRESSION__EXPECTED_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AutomatedresttestingPackage.Literals.EXPRESSION__EXPECTED_VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionAccess().getRelationalOperatorRelationalOperatorEnumRuleCall_0_0(), semanticObject.getRelationalOperator());
		feeder.accept(grammarAccess.getExpressionAccess().getExpectedValueEStringParserRuleCall_1_0(), semanticObject.getExpectedValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Parameter(ISerializationContext context, automatedresttesting.Parameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AutomatedresttestingPackage.Literals.ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AutomatedresttestingPackage.Literals.ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterAccess().getNameEStringParserRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RestService returns RestService
	 *
	 * Constraint:
	 *     (
	 *         method=MethodType 
	 *         name=EString 
	 *         uri=SLASH 
	 *         parameters+=Parameter* 
	 *         request=[Element|EString]? 
	 *         response=[Element|EString]
	 *     )
	 */
	protected void sequence_RestService(ISerializationContext context, RestService semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Restriction returns Restriction
	 *
	 * Constraint:
	 *     mockType=MockTypes
	 */
	protected void sequence_Restriction(ISerializationContext context, Restriction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AutomatedresttestingPackage.Literals.RESTRICTION__MOCK_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AutomatedresttestingPackage.Literals.RESTRICTION__MOCK_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRestrictionAccess().getMockTypeMockTypesEnumRuleCall_3_0(), semanticObject.getMockType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns SimpleEntity
	 *     SimpleEntity returns SimpleEntity
	 *
	 * Constraint:
	 *     (name=EString entityAttributes+=Attribute entityAttributes+=Attribute*)
	 */
	protected void sequence_SimpleEntity(ISerializationContext context, SimpleEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Test returns Test
	 *
	 * Constraint:
	 *     (name=EString service=[RestService|EString] description=EString? assertions+=Assertion+)
	 */
	protected void sequence_Test(ISerializationContext context, Test semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
