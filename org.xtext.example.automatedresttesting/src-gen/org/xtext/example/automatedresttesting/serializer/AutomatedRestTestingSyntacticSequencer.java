/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.automatedresttesting.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.automatedresttesting.services.AutomatedRestTestingGrammarAccess;

@SuppressWarnings("all")
public class AutomatedRestTestingSyntacticSequencer extends AbstractSyntacticSequencer {

	protected AutomatedRestTestingGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Expression___ParameterKeyword_1_0_0___ARROWTerminalRuleCall_1_0_1_1_or_DOTTerminalRuleCall_1_0_1_0____q;
	protected AbstractElementAlias match_MappingElement___RequestKeyword_7_0_ARROWTerminalRuleCall_7_1__q;
	protected AbstractElementAlias match_RestService___SQUARE_LEFT_BRACKETTerminalRuleCall_13_0_SQUARE_RIGHT_BRACKETTerminalRuleCall_13_1__q;
	protected AbstractElementAlias match_RestService___SQUARE_LEFT_BRACKETTerminalRuleCall_7_5_0_SQUARE_RIGHT_BRACKETTerminalRuleCall_7_5_1__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (AutomatedRestTestingGrammarAccess) access;
		match_Expression___ParameterKeyword_1_0_0___ARROWTerminalRuleCall_1_0_1_1_or_DOTTerminalRuleCall_1_0_1_0____q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getExpressionAccess().getParameterKeyword_1_0_0()), new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getExpressionAccess().getARROWTerminalRuleCall_1_0_1_1()), new TokenAlias(false, false, grammarAccess.getExpressionAccess().getDOTTerminalRuleCall_1_0_1_0())));
		match_MappingElement___RequestKeyword_7_0_ARROWTerminalRuleCall_7_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getMappingElementAccess().getRequestKeyword_7_0()), new TokenAlias(false, false, grammarAccess.getMappingElementAccess().getARROWTerminalRuleCall_7_1()));
		match_RestService___SQUARE_LEFT_BRACKETTerminalRuleCall_13_0_SQUARE_RIGHT_BRACKETTerminalRuleCall_13_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getRestServiceAccess().getSQUARE_LEFT_BRACKETTerminalRuleCall_13_0()), new TokenAlias(false, false, grammarAccess.getRestServiceAccess().getSQUARE_RIGHT_BRACKETTerminalRuleCall_13_1()));
		match_RestService___SQUARE_LEFT_BRACKETTerminalRuleCall_7_5_0_SQUARE_RIGHT_BRACKETTerminalRuleCall_7_5_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getRestServiceAccess().getSQUARE_LEFT_BRACKETTerminalRuleCall_7_5_0()), new TokenAlias(false, false, grammarAccess.getRestServiceAccess().getSQUARE_RIGHT_BRACKETTerminalRuleCall_7_5_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getARROWRule())
			return getARROWToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCOMMARule())
			return getCOMMAToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDOTRule())
			return getDOTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getEQUALRule())
			return getEQUALToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLEFT_BRACKETRule())
			return getLEFT_BRACKETToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLEFT_PARENTHESISRule())
			return getLEFT_PARENTHESISToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRIGHT_BRACKETRule())
			return getRIGHT_BRACKETToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRIGHT_PARENTHESISRule())
			return getRIGHT_PARENTHESISToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSEMICOLONRule())
			return getSEMICOLONToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSQUARE_LEFT_BRACKETRule())
			return getSQUARE_LEFT_BRACKETToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSQUARE_RIGHT_BRACKETRule())
			return getSQUARE_RIGHT_BRACKETToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal ARROW : "->";
	 */
	protected String getARROWToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "->";
	}
	
	/**
	 * terminal COMMA : ",";
	 */
	protected String getCOMMAToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ",";
	}
	
	/**
	 * terminal DOT : ".";
	 */
	protected String getDOTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ".";
	}
	
	/**
	 * terminal EQUAL : "=";
	 */
	protected String getEQUALToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "=";
	}
	
	/**
	 * terminal LEFT_BRACKET : "{";
	 */
	protected String getLEFT_BRACKETToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "{";
	}
	
	/**
	 * terminal LEFT_PARENTHESIS : "(";
	 */
	protected String getLEFT_PARENTHESISToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "(";
	}
	
	/**
	 * terminal RIGHT_BRACKET : "}";
	 */
	protected String getRIGHT_BRACKETToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "}";
	}
	
	/**
	 * terminal RIGHT_PARENTHESIS : ")";
	 */
	protected String getRIGHT_PARENTHESISToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ")";
	}
	
	/**
	 * terminal SEMICOLON : ";";
	 */
	protected String getSEMICOLONToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ";";
	}
	
	/**
	 * terminal SQUARE_LEFT_BRACKET : "[";
	 */
	protected String getSQUARE_LEFT_BRACKETToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "[";
	}
	
	/**
	 * terminal SQUARE_RIGHT_BRACKET : "]";
	 */
	protected String getSQUARE_RIGHT_BRACKETToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "]";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Expression___ParameterKeyword_1_0_0___ARROWTerminalRuleCall_1_0_1_1_or_DOTTerminalRuleCall_1_0_1_0____q.equals(syntax))
				emit_Expression___ParameterKeyword_1_0_0___ARROWTerminalRuleCall_1_0_1_1_or_DOTTerminalRuleCall_1_0_1_0____q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MappingElement___RequestKeyword_7_0_ARROWTerminalRuleCall_7_1__q.equals(syntax))
				emit_MappingElement___RequestKeyword_7_0_ARROWTerminalRuleCall_7_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RestService___SQUARE_LEFT_BRACKETTerminalRuleCall_13_0_SQUARE_RIGHT_BRACKETTerminalRuleCall_13_1__q.equals(syntax))
				emit_RestService___SQUARE_LEFT_BRACKETTerminalRuleCall_13_0_SQUARE_RIGHT_BRACKETTerminalRuleCall_13_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RestService___SQUARE_LEFT_BRACKETTerminalRuleCall_7_5_0_SQUARE_RIGHT_BRACKETTerminalRuleCall_7_5_1__q.equals(syntax))
				emit_RestService___SQUARE_LEFT_BRACKETTerminalRuleCall_7_5_0_SQUARE_RIGHT_BRACKETTerminalRuleCall_7_5_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('parameter' (DOT | ARROW))?
	 *
	 * This ambiguous syntax occurs at:
	 *     relationalOperator=RelationalOperator (ambiguity) expectedValue=Literal
	 */
	protected void emit_Expression___ParameterKeyword_1_0_0___ARROWTerminalRuleCall_1_0_1_1_or_DOTTerminalRuleCall_1_0_1_0____q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('request' ARROW)?
	 *
	 * This ambiguous syntax occurs at:
	 *     parameter=[Element|QualifiedName] COMMA 'value' EQUAL (ambiguity) value=Literal
	 */
	protected void emit_MappingElement___RequestKeyword_7_0_ARROWTerminalRuleCall_7_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (SQUARE_LEFT_BRACKET SQUARE_RIGHT_BRACKET)?
	 *
	 * This ambiguous syntax occurs at:
	 *     response=[Element|EString] (ambiguity) SEMICOLON RIGHT_BRACKET RIGHT_BRACKET (rule end)
	 */
	protected void emit_RestService___SQUARE_LEFT_BRACKETTerminalRuleCall_13_0_SQUARE_RIGHT_BRACKETTerminalRuleCall_13_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (SQUARE_LEFT_BRACKET SQUARE_RIGHT_BRACKET)?
	 *
	 * This ambiguous syntax occurs at:
	 *     request=[Element|EString] (ambiguity) SEMICOLON RIGHT_BRACKET 'Response' LEFT_BRACKET 'Type' EQUAL response=[Element|EString]
	 */
	protected void emit_RestService___SQUARE_LEFT_BRACKETTerminalRuleCall_7_5_0_SQUARE_RIGHT_BRACKETTerminalRuleCall_7_5_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
