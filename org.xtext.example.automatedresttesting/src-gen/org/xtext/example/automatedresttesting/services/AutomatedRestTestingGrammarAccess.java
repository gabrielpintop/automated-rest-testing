/*
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.example.automatedresttesting.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AutomatedRestTestingGrammarAccess extends AbstractGrammarElementFinder {
	
	public class AutomatedRestTestingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.AutomatedRestTesting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAutomatedRestTestingAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cApiURLKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cEQUALTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cUrlAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUrlEStringParserRuleCall_3_0 = (RuleCall)cUrlAssignment_3.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cDataElementsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cDataElementsElementParserRuleCall_5_0_0 = (RuleCall)cDataElementsAssignment_5_0.eContents().get(0);
		private final Assignment cDataElementsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDataElementsElementParserRuleCall_5_1_0 = (RuleCall)cDataElementsAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cServicesAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cServicesRestServiceParserRuleCall_6_0_0 = (RuleCall)cServicesAssignment_6_0.eContents().get(0);
		private final Assignment cServicesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cServicesRestServiceParserRuleCall_6_1_0 = (RuleCall)cServicesAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cTestsAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cTestsTestParserRuleCall_7_0_0 = (RuleCall)cTestsAssignment_7_0.eContents().get(0);
		private final Assignment cTestsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cTestsTestParserRuleCall_7_1_0 = (RuleCall)cTestsAssignment_7_1.eContents().get(0);
		
		//AutomatedRestTesting:
		//	{AutomatedRestTesting}
		//	'apiURL' EQUAL url=EString SEMICOLON (dataElements+=Element dataElements+=Element*)? (services+=RestService
		//	services+=RestService*)? (tests+=Test tests+=Test*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{AutomatedRestTesting} 'apiURL' EQUAL url=EString SEMICOLON (dataElements+=Element dataElements+=Element*)?
		//(services+=RestService services+=RestService*)? (tests+=Test tests+=Test*)?
		public Group getGroup() { return cGroup; }
		
		//{AutomatedRestTesting}
		public Action getAutomatedRestTestingAction_0() { return cAutomatedRestTestingAction_0; }
		
		//'apiURL'
		public Keyword getApiURLKeyword_1() { return cApiURLKeyword_1; }
		
		//EQUAL
		public RuleCall getEQUALTerminalRuleCall_2() { return cEQUALTerminalRuleCall_2; }
		
		//url=EString
		public Assignment getUrlAssignment_3() { return cUrlAssignment_3; }
		
		//EString
		public RuleCall getUrlEStringParserRuleCall_3_0() { return cUrlEStringParserRuleCall_3_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_4() { return cSEMICOLONTerminalRuleCall_4; }
		
		//(dataElements+=Element dataElements+=Element*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//dataElements+=Element
		public Assignment getDataElementsAssignment_5_0() { return cDataElementsAssignment_5_0; }
		
		//Element
		public RuleCall getDataElementsElementParserRuleCall_5_0_0() { return cDataElementsElementParserRuleCall_5_0_0; }
		
		//dataElements+=Element*
		public Assignment getDataElementsAssignment_5_1() { return cDataElementsAssignment_5_1; }
		
		//Element
		public RuleCall getDataElementsElementParserRuleCall_5_1_0() { return cDataElementsElementParserRuleCall_5_1_0; }
		
		//(services+=RestService services+=RestService*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//services+=RestService
		public Assignment getServicesAssignment_6_0() { return cServicesAssignment_6_0; }
		
		//RestService
		public RuleCall getServicesRestServiceParserRuleCall_6_0_0() { return cServicesRestServiceParserRuleCall_6_0_0; }
		
		//services+=RestService*
		public Assignment getServicesAssignment_6_1() { return cServicesAssignment_6_1; }
		
		//RestService
		public RuleCall getServicesRestServiceParserRuleCall_6_1_0() { return cServicesRestServiceParserRuleCall_6_1_0; }
		
		//(tests+=Test tests+=Test*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//tests+=Test
		public Assignment getTestsAssignment_7_0() { return cTestsAssignment_7_0; }
		
		//Test
		public RuleCall getTestsTestParserRuleCall_7_0_0() { return cTestsTestParserRuleCall_7_0_0; }
		
		//tests+=Test*
		public Assignment getTestsAssignment_7_1() { return cTestsAssignment_7_1; }
		
		//Test
		public RuleCall getTestsTestParserRuleCall_7_1_0() { return cTestsTestParserRuleCall_7_1_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleEntityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Element:
		//	Entity | SimpleEntity;
		@Override public ParserRule getRule() { return rule; }
		
		//Entity | SimpleEntity
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Entity
		public RuleCall getEntityParserRuleCall_0() { return cEntityParserRuleCall_0; }
		
		//SimpleEntity
		public RuleCall getSimpleEntityParserRuleCall_1() { return cSimpleEntityParserRuleCall_1; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.Attribute");
		private final RuleCall cAttribute_ImplParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Attribute:
		//	Attribute_Impl;
		@Override public ParserRule getRule() { return rule; }
		
		//Attribute_Impl
		public RuleCall getAttribute_ImplParserRuleCall() { return cAttribute_ImplParserRuleCall; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class RestServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.RestService");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMethodAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMethodMethodTypeEnumRuleCall_0_0 = (RuleCall)cMethodAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cLEFT_BRACKETTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cURLKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cEQUALTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cUriAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cUriSLASHTerminalRuleCall_5_0 = (RuleCall)cUriAssignment_5.eContents().get(0);
		private final RuleCall cEStringParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cAlternatives_7.eContents().get(0);
		private final RuleCall cSLASHTerminalRuleCall_7_0_0 = (RuleCall)cGroup_7_0.eContents().get(0);
		private final RuleCall cEStringParserRuleCall_7_0_1 = (RuleCall)cGroup_7_0.eContents().get(1);
		private final Assignment cParametersAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_7_1_0 = (RuleCall)cParametersAssignment_7_1.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cRequestKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final RuleCall cLEFT_BRACKETTerminalRuleCall_9_1 = (RuleCall)cGroup_9.eContents().get(1);
		private final Keyword cTypeKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final RuleCall cEQUALTerminalRuleCall_9_3 = (RuleCall)cGroup_9.eContents().get(3);
		private final Assignment cRequestAssignment_9_4 = (Assignment)cGroup_9.eContents().get(4);
		private final CrossReference cRequestElementCrossReference_9_4_0 = (CrossReference)cRequestAssignment_9_4.eContents().get(0);
		private final RuleCall cRequestElementEStringParserRuleCall_9_4_0_1 = (RuleCall)cRequestElementCrossReference_9_4_0.eContents().get(1);
		private final Group cGroup_9_5 = (Group)cGroup_9.eContents().get(5);
		private final RuleCall cSQUARE_LEFT_BRACKETTerminalRuleCall_9_5_0 = (RuleCall)cGroup_9_5.eContents().get(0);
		private final RuleCall cSQUARE_RIGHT_BRACKETTerminalRuleCall_9_5_1 = (RuleCall)cGroup_9_5.eContents().get(1);
		private final RuleCall cSEMICOLONTerminalRuleCall_9_6 = (RuleCall)cGroup_9.eContents().get(6);
		private final RuleCall cRIGHT_BRACKETTerminalRuleCall_9_7 = (RuleCall)cGroup_9.eContents().get(7);
		private final Keyword cResponseKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final RuleCall cLEFT_BRACKETTerminalRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		private final Keyword cTypeKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final RuleCall cEQUALTerminalRuleCall_13 = (RuleCall)cGroup.eContents().get(13);
		private final Assignment cResponseAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final CrossReference cResponseElementCrossReference_14_0 = (CrossReference)cResponseAssignment_14.eContents().get(0);
		private final RuleCall cResponseElementEStringParserRuleCall_14_0_1 = (RuleCall)cResponseElementCrossReference_14_0.eContents().get(1);
		private final Group cGroup_15 = (Group)cGroup.eContents().get(15);
		private final RuleCall cSQUARE_LEFT_BRACKETTerminalRuleCall_15_0 = (RuleCall)cGroup_15.eContents().get(0);
		private final RuleCall cSQUARE_RIGHT_BRACKETTerminalRuleCall_15_1 = (RuleCall)cGroup_15.eContents().get(1);
		private final RuleCall cSEMICOLONTerminalRuleCall_16 = (RuleCall)cGroup.eContents().get(16);
		private final RuleCall cRIGHT_BRACKETTerminalRuleCall_17 = (RuleCall)cGroup.eContents().get(17);
		private final RuleCall cRIGHT_BRACKETTerminalRuleCall_18 = (RuleCall)cGroup.eContents().get(18);
		
		//RestService:
		//	method=MethodType name=EString
		//	LEFT_BRACKET
		//	'URL' EQUAL uri=SLASH EString (SLASH EString | parameters+=Parameter)* SEMICOLON ('Request'
		//	LEFT_BRACKET
		//	'Type' EQUAL request=[Element|EString] (SQUARE_LEFT_BRACKET SQUARE_RIGHT_BRACKET)? SEMICOLON
		//	RIGHT_BRACKET)?
		//	'Response'
		//	LEFT_BRACKET
		//	'Type' EQUAL response=[Element|EString] (SQUARE_LEFT_BRACKET SQUARE_RIGHT_BRACKET)? SEMICOLON
		//	RIGHT_BRACKET
		//	RIGHT_BRACKET;
		@Override public ParserRule getRule() { return rule; }
		
		//method=MethodType name=EString LEFT_BRACKET 'URL' EQUAL uri=SLASH EString (SLASH EString | parameters+=Parameter)*
		//SEMICOLON ('Request' LEFT_BRACKET 'Type' EQUAL request=[Element|EString] (SQUARE_LEFT_BRACKET SQUARE_RIGHT_BRACKET)?
		//SEMICOLON RIGHT_BRACKET)? 'Response' LEFT_BRACKET 'Type' EQUAL response=[Element|EString] (SQUARE_LEFT_BRACKET
		//SQUARE_RIGHT_BRACKET)? SEMICOLON RIGHT_BRACKET RIGHT_BRACKET
		public Group getGroup() { return cGroup; }
		
		//method=MethodType
		public Assignment getMethodAssignment_0() { return cMethodAssignment_0; }
		
		//MethodType
		public RuleCall getMethodMethodTypeEnumRuleCall_0_0() { return cMethodMethodTypeEnumRuleCall_0_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//LEFT_BRACKET
		public RuleCall getLEFT_BRACKETTerminalRuleCall_2() { return cLEFT_BRACKETTerminalRuleCall_2; }
		
		//'URL'
		public Keyword getURLKeyword_3() { return cURLKeyword_3; }
		
		//EQUAL
		public RuleCall getEQUALTerminalRuleCall_4() { return cEQUALTerminalRuleCall_4; }
		
		//uri=SLASH
		public Assignment getUriAssignment_5() { return cUriAssignment_5; }
		
		//SLASH
		public RuleCall getUriSLASHTerminalRuleCall_5_0() { return cUriSLASHTerminalRuleCall_5_0; }
		
		//EString
		public RuleCall getEStringParserRuleCall_6() { return cEStringParserRuleCall_6; }
		
		//(SLASH EString | parameters+=Parameter)*
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//SLASH EString
		public Group getGroup_7_0() { return cGroup_7_0; }
		
		//SLASH
		public RuleCall getSLASHTerminalRuleCall_7_0_0() { return cSLASHTerminalRuleCall_7_0_0; }
		
		//EString
		public RuleCall getEStringParserRuleCall_7_0_1() { return cEStringParserRuleCall_7_0_1; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_7_1() { return cParametersAssignment_7_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_7_1_0() { return cParametersParameterParserRuleCall_7_1_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_8() { return cSEMICOLONTerminalRuleCall_8; }
		
		//('Request' LEFT_BRACKET 'Type' EQUAL request=[Element|EString] (SQUARE_LEFT_BRACKET SQUARE_RIGHT_BRACKET)? SEMICOLON
		//RIGHT_BRACKET)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'Request'
		public Keyword getRequestKeyword_9_0() { return cRequestKeyword_9_0; }
		
		//LEFT_BRACKET
		public RuleCall getLEFT_BRACKETTerminalRuleCall_9_1() { return cLEFT_BRACKETTerminalRuleCall_9_1; }
		
		//'Type'
		public Keyword getTypeKeyword_9_2() { return cTypeKeyword_9_2; }
		
		//EQUAL
		public RuleCall getEQUALTerminalRuleCall_9_3() { return cEQUALTerminalRuleCall_9_3; }
		
		//request=[Element|EString]
		public Assignment getRequestAssignment_9_4() { return cRequestAssignment_9_4; }
		
		//[Element|EString]
		public CrossReference getRequestElementCrossReference_9_4_0() { return cRequestElementCrossReference_9_4_0; }
		
		//EString
		public RuleCall getRequestElementEStringParserRuleCall_9_4_0_1() { return cRequestElementEStringParserRuleCall_9_4_0_1; }
		
		//(SQUARE_LEFT_BRACKET SQUARE_RIGHT_BRACKET)?
		public Group getGroup_9_5() { return cGroup_9_5; }
		
		//SQUARE_LEFT_BRACKET
		public RuleCall getSQUARE_LEFT_BRACKETTerminalRuleCall_9_5_0() { return cSQUARE_LEFT_BRACKETTerminalRuleCall_9_5_0; }
		
		//SQUARE_RIGHT_BRACKET
		public RuleCall getSQUARE_RIGHT_BRACKETTerminalRuleCall_9_5_1() { return cSQUARE_RIGHT_BRACKETTerminalRuleCall_9_5_1; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_9_6() { return cSEMICOLONTerminalRuleCall_9_6; }
		
		//RIGHT_BRACKET
		public RuleCall getRIGHT_BRACKETTerminalRuleCall_9_7() { return cRIGHT_BRACKETTerminalRuleCall_9_7; }
		
		//'Response'
		public Keyword getResponseKeyword_10() { return cResponseKeyword_10; }
		
		//LEFT_BRACKET
		public RuleCall getLEFT_BRACKETTerminalRuleCall_11() { return cLEFT_BRACKETTerminalRuleCall_11; }
		
		//'Type'
		public Keyword getTypeKeyword_12() { return cTypeKeyword_12; }
		
		//EQUAL
		public RuleCall getEQUALTerminalRuleCall_13() { return cEQUALTerminalRuleCall_13; }
		
		//response=[Element|EString]
		public Assignment getResponseAssignment_14() { return cResponseAssignment_14; }
		
		//[Element|EString]
		public CrossReference getResponseElementCrossReference_14_0() { return cResponseElementCrossReference_14_0; }
		
		//EString
		public RuleCall getResponseElementEStringParserRuleCall_14_0_1() { return cResponseElementEStringParserRuleCall_14_0_1; }
		
		//(SQUARE_LEFT_BRACKET SQUARE_RIGHT_BRACKET)?
		public Group getGroup_15() { return cGroup_15; }
		
		//SQUARE_LEFT_BRACKET
		public RuleCall getSQUARE_LEFT_BRACKETTerminalRuleCall_15_0() { return cSQUARE_LEFT_BRACKETTerminalRuleCall_15_0; }
		
		//SQUARE_RIGHT_BRACKET
		public RuleCall getSQUARE_RIGHT_BRACKETTerminalRuleCall_15_1() { return cSQUARE_RIGHT_BRACKETTerminalRuleCall_15_1; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_16() { return cSEMICOLONTerminalRuleCall_16; }
		
		//RIGHT_BRACKET
		public RuleCall getRIGHT_BRACKETTerminalRuleCall_17() { return cRIGHT_BRACKETTerminalRuleCall_17; }
		
		//RIGHT_BRACKET
		public RuleCall getRIGHT_BRACKETTerminalRuleCall_18() { return cRIGHT_BRACKETTerminalRuleCall_18; }
	}
	public class TestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.Test");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cLEFT_BRACKETTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cServiceKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cEQUALTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cServiceAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cServiceRestServiceCrossReference_5_0 = (CrossReference)cServiceAssignment_5.eContents().get(0);
		private final RuleCall cServiceRestServiceEStringParserRuleCall_5_0_1 = (RuleCall)cServiceRestServiceCrossReference_5_0.eContents().get(1);
		private final RuleCall cSEMICOLONTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cDescriptionKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final RuleCall cEQUALTerminalRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final Assignment cDescriptionAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cDescriptionEStringParserRuleCall_7_2_0 = (RuleCall)cDescriptionAssignment_7_2.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_7_3 = (RuleCall)cGroup_7.eContents().get(3);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cMappingKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final RuleCall cSQUARE_LEFT_BRACKETTerminalRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final Assignment cMappingsAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cMappingsMappingElementParserRuleCall_8_2_0 = (RuleCall)cMappingsAssignment_8_2.eContents().get(0);
		private final Assignment cMappingsAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cMappingsMappingElementParserRuleCall_8_3_0 = (RuleCall)cMappingsAssignment_8_3.eContents().get(0);
		private final RuleCall cSQUARE_RIGHT_BRACKETTerminalRuleCall_8_4 = (RuleCall)cGroup_8.eContents().get(4);
		private final Keyword cAssertionsKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final RuleCall cLEFT_BRACKETTerminalRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Assignment cAssertionsAssignment_11_0 = (Assignment)cGroup_11.eContents().get(0);
		private final RuleCall cAssertionsAssertionParserRuleCall_11_0_0 = (RuleCall)cAssertionsAssignment_11_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_11_1 = (RuleCall)cGroup_11.eContents().get(1);
		private final RuleCall cRIGHT_BRACKETTerminalRuleCall_12 = (RuleCall)cGroup.eContents().get(12);
		private final RuleCall cRIGHT_BRACKETTerminalRuleCall_13 = (RuleCall)cGroup.eContents().get(13);
		
		//Test:
		//	'Test'
		//	name=EString
		//	LEFT_BRACKET
		//	'service' EQUAL service=[RestService|EString] SEMICOLON ('description' EQUAL description=EString SEMICOLON)?
		//	('Mapping' SQUARE_LEFT_BRACKET mappings+=MappingElement mappings+=MappingElement* SQUARE_RIGHT_BRACKET)?
		//	'Assertions' LEFT_BRACKET (assertions+=Assertion SEMICOLON)+ RIGHT_BRACKET
		//	RIGHT_BRACKET;
		@Override public ParserRule getRule() { return rule; }
		
		//'Test' name=EString LEFT_BRACKET 'service' EQUAL service=[RestService|EString] SEMICOLON ('description' EQUAL
		//description=EString SEMICOLON)? ('Mapping' SQUARE_LEFT_BRACKET mappings+=MappingElement mappings+=MappingElement*
		//SQUARE_RIGHT_BRACKET)? 'Assertions' LEFT_BRACKET (assertions+=Assertion SEMICOLON)+ RIGHT_BRACKET RIGHT_BRACKET
		public Group getGroup() { return cGroup; }
		
		//'Test'
		public Keyword getTestKeyword_0() { return cTestKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//LEFT_BRACKET
		public RuleCall getLEFT_BRACKETTerminalRuleCall_2() { return cLEFT_BRACKETTerminalRuleCall_2; }
		
		//'service'
		public Keyword getServiceKeyword_3() { return cServiceKeyword_3; }
		
		//EQUAL
		public RuleCall getEQUALTerminalRuleCall_4() { return cEQUALTerminalRuleCall_4; }
		
		//service=[RestService|EString]
		public Assignment getServiceAssignment_5() { return cServiceAssignment_5; }
		
		//[RestService|EString]
		public CrossReference getServiceRestServiceCrossReference_5_0() { return cServiceRestServiceCrossReference_5_0; }
		
		//EString
		public RuleCall getServiceRestServiceEStringParserRuleCall_5_0_1() { return cServiceRestServiceEStringParserRuleCall_5_0_1; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_6() { return cSEMICOLONTerminalRuleCall_6; }
		
		//('description' EQUAL description=EString SEMICOLON)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'description'
		public Keyword getDescriptionKeyword_7_0() { return cDescriptionKeyword_7_0; }
		
		//EQUAL
		public RuleCall getEQUALTerminalRuleCall_7_1() { return cEQUALTerminalRuleCall_7_1; }
		
		//description=EString
		public Assignment getDescriptionAssignment_7_2() { return cDescriptionAssignment_7_2; }
		
		//EString
		public RuleCall getDescriptionEStringParserRuleCall_7_2_0() { return cDescriptionEStringParserRuleCall_7_2_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_7_3() { return cSEMICOLONTerminalRuleCall_7_3; }
		
		//('Mapping' SQUARE_LEFT_BRACKET mappings+=MappingElement mappings+=MappingElement* SQUARE_RIGHT_BRACKET)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'Mapping'
		public Keyword getMappingKeyword_8_0() { return cMappingKeyword_8_0; }
		
		//SQUARE_LEFT_BRACKET
		public RuleCall getSQUARE_LEFT_BRACKETTerminalRuleCall_8_1() { return cSQUARE_LEFT_BRACKETTerminalRuleCall_8_1; }
		
		//mappings+=MappingElement
		public Assignment getMappingsAssignment_8_2() { return cMappingsAssignment_8_2; }
		
		//MappingElement
		public RuleCall getMappingsMappingElementParserRuleCall_8_2_0() { return cMappingsMappingElementParserRuleCall_8_2_0; }
		
		//mappings+=MappingElement*
		public Assignment getMappingsAssignment_8_3() { return cMappingsAssignment_8_3; }
		
		//MappingElement
		public RuleCall getMappingsMappingElementParserRuleCall_8_3_0() { return cMappingsMappingElementParserRuleCall_8_3_0; }
		
		//SQUARE_RIGHT_BRACKET
		public RuleCall getSQUARE_RIGHT_BRACKETTerminalRuleCall_8_4() { return cSQUARE_RIGHT_BRACKETTerminalRuleCall_8_4; }
		
		//'Assertions'
		public Keyword getAssertionsKeyword_9() { return cAssertionsKeyword_9; }
		
		//LEFT_BRACKET
		public RuleCall getLEFT_BRACKETTerminalRuleCall_10() { return cLEFT_BRACKETTerminalRuleCall_10; }
		
		//(assertions+=Assertion SEMICOLON)+
		public Group getGroup_11() { return cGroup_11; }
		
		//assertions+=Assertion
		public Assignment getAssertionsAssignment_11_0() { return cAssertionsAssignment_11_0; }
		
		//Assertion
		public RuleCall getAssertionsAssertionParserRuleCall_11_0_0() { return cAssertionsAssertionParserRuleCall_11_0_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_11_1() { return cSEMICOLONTerminalRuleCall_11_1; }
		
		//RIGHT_BRACKET
		public RuleCall getRIGHT_BRACKETTerminalRuleCall_12() { return cRIGHT_BRACKETTerminalRuleCall_12; }
		
		//RIGHT_BRACKET
		public RuleCall getRIGHT_BRACKETTerminalRuleCall_13() { return cRIGHT_BRACKETTerminalRuleCall_13; }
	}
	public class AssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.Assertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResponseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cDOTTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cARROWTerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final Assignment cDataToTestAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cDataToTestElementCrossReference_1_1_0 = (CrossReference)cDataToTestAssignment_1_1.eContents().get(0);
		private final RuleCall cDataToTestElementQualifiedNameParserRuleCall_1_1_0_1 = (RuleCall)cDataToTestElementCrossReference_1_1_0.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		
		//Assertion:
		//	'response' ((DOT | ARROW)? dataToTest=[Element|QualifiedName])? condition=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'response' ((DOT | ARROW)? dataToTest=[Element|QualifiedName])? condition=Expression
		public Group getGroup() { return cGroup; }
		
		//'response'
		public Keyword getResponseKeyword_0() { return cResponseKeyword_0; }
		
		//((DOT | ARROW)? dataToTest=[Element|QualifiedName])?
		public Group getGroup_1() { return cGroup_1; }
		
		//(DOT | ARROW)?
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//DOT
		public RuleCall getDOTTerminalRuleCall_1_0_0() { return cDOTTerminalRuleCall_1_0_0; }
		
		//ARROW
		public RuleCall getARROWTerminalRuleCall_1_0_1() { return cARROWTerminalRuleCall_1_0_1; }
		
		//dataToTest=[Element|QualifiedName]
		public Assignment getDataToTestAssignment_1_1() { return cDataToTestAssignment_1_1; }
		
		//[Element|QualifiedName]
		public CrossReference getDataToTestElementCrossReference_1_1_0() { return cDataToTestElementCrossReference_1_1_0; }
		
		//QualifiedName
		public RuleCall getDataToTestElementQualifiedNameParserRuleCall_1_1_0_1() { return cDataToTestElementQualifiedNameParserRuleCall_1_1_0_1; }
		
		//condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cDOTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID (DOT ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID (DOT ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//(DOT ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//DOT
		public RuleCall getDOTTerminalRuleCall_1_0() { return cDOTTerminalRuleCall_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRelationalOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRelationalOperatorRelationalOperatorEnumRuleCall_0_0 = (RuleCall)cRelationalOperatorAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cParameterKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final RuleCall cDOTTerminalRuleCall_1_0_1_0 = (RuleCall)cAlternatives_1_0_1.eContents().get(0);
		private final RuleCall cARROWTerminalRuleCall_1_0_1_1 = (RuleCall)cAlternatives_1_0_1.eContents().get(1);
		private final Assignment cExpectedValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpectedValueLiteralParserRuleCall_1_1_0 = (RuleCall)cExpectedValueAssignment_1_1.eContents().get(0);
		
		//Expression:
		//	relationalOperator=RelationalOperator (('parameter' (DOT | ARROW))? expectedValue=Literal)?;
		@Override public ParserRule getRule() { return rule; }
		
		//relationalOperator=RelationalOperator (('parameter' (DOT | ARROW))? expectedValue=Literal)?
		public Group getGroup() { return cGroup; }
		
		//relationalOperator=RelationalOperator
		public Assignment getRelationalOperatorAssignment_0() { return cRelationalOperatorAssignment_0; }
		
		//RelationalOperator
		public RuleCall getRelationalOperatorRelationalOperatorEnumRuleCall_0_0() { return cRelationalOperatorRelationalOperatorEnumRuleCall_0_0; }
		
		//(('parameter' (DOT | ARROW))? expectedValue=Literal)?
		public Group getGroup_1() { return cGroup_1; }
		
		//('parameter' (DOT | ARROW))?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'parameter'
		public Keyword getParameterKeyword_1_0_0() { return cParameterKeyword_1_0_0; }
		
		//DOT | ARROW
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }
		
		//DOT
		public RuleCall getDOTTerminalRuleCall_1_0_1_0() { return cDOTTerminalRuleCall_1_0_1_0; }
		
		//ARROW
		public RuleCall getARROWTerminalRuleCall_1_0_1_1() { return cARROWTerminalRuleCall_1_0_1_1; }
		
		//expectedValue=Literal
		public Assignment getExpectedValueAssignment_1_1() { return cExpectedValueAssignment_1_1; }
		
		//Literal
		public RuleCall getExpectedValueLiteralParserRuleCall_1_1_0() { return cExpectedValueLiteralParserRuleCall_1_1_0; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cElementLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Literal:
		//	ElementLiteral | StringLiteral | IntegerLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//ElementLiteral | StringLiteral | IntegerLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ElementLiteral
		public RuleCall getElementLiteralParserRuleCall_0() { return cElementLiteralParserRuleCall_0; }
		
		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_1() { return cStringLiteralParserRuleCall_1; }
		
		//IntegerLiteral
		public RuleCall getIntegerLiteralParserRuleCall_2() { return cIntegerLiteralParserRuleCall_2; }
	}
	public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.IntegerLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntegerLiteral:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEStringParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//	value=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EString
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_0() { return cValueEStringParserRuleCall_0; }
	}
	public class ElementLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.ElementLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cValueElementCrossReference_0 = (CrossReference)cValueAssignment.eContents().get(0);
		private final RuleCall cValueElementQualifiedNameParserRuleCall_0_1 = (RuleCall)cValueElementCrossReference_0.eContents().get(1);
		
		//ElementLiteral:
		//	value=[Element|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//value=[Element|QualifiedName]
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//[Element|QualifiedName]
		public CrossReference getValueElementCrossReference_0() { return cValueElementCrossReference_0; }
		
		//QualifiedName
		public RuleCall getValueElementQualifiedNameParserRuleCall_0_1() { return cValueElementQualifiedNameParserRuleCall_0_1; }
	}
	public class MappingElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.MappingElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLEFT_BRACKETTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cParameterKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cEQUALTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cParameterAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cParameterElementCrossReference_3_0 = (CrossReference)cParameterAssignment_3.eContents().get(0);
		private final RuleCall cParameterElementQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cParameterElementCrossReference_3_0.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cValueKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cEQUALTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cRequestKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final RuleCall cARROWTerminalRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final Assignment cValueAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cValueLiteralParserRuleCall_8_0 = (RuleCall)cValueAssignment_8.eContents().get(0);
		private final RuleCall cRIGHT_BRACKETTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		//MappingElement:
		//	LEFT_BRACKET
		//	'parameter' EQUAL parameter=[Element|QualifiedName] COMMA
		//	'value' EQUAL ('request' ARROW)? value=Literal
		//	RIGHT_BRACKET;
		@Override public ParserRule getRule() { return rule; }
		
		//LEFT_BRACKET 'parameter' EQUAL parameter=[Element|QualifiedName] COMMA 'value' EQUAL ('request' ARROW)? value=Literal
		//RIGHT_BRACKET
		public Group getGroup() { return cGroup; }
		
		//LEFT_BRACKET
		public RuleCall getLEFT_BRACKETTerminalRuleCall_0() { return cLEFT_BRACKETTerminalRuleCall_0; }
		
		//'parameter'
		public Keyword getParameterKeyword_1() { return cParameterKeyword_1; }
		
		//EQUAL
		public RuleCall getEQUALTerminalRuleCall_2() { return cEQUALTerminalRuleCall_2; }
		
		//parameter=[Element|QualifiedName]
		public Assignment getParameterAssignment_3() { return cParameterAssignment_3; }
		
		//[Element|QualifiedName]
		public CrossReference getParameterElementCrossReference_3_0() { return cParameterElementCrossReference_3_0; }
		
		//QualifiedName
		public RuleCall getParameterElementQualifiedNameParserRuleCall_3_0_1() { return cParameterElementQualifiedNameParserRuleCall_3_0_1; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_4() { return cCOMMATerminalRuleCall_4; }
		
		//'value'
		public Keyword getValueKeyword_5() { return cValueKeyword_5; }
		
		//EQUAL
		public RuleCall getEQUALTerminalRuleCall_6() { return cEQUALTerminalRuleCall_6; }
		
		//('request' ARROW)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'request'
		public Keyword getRequestKeyword_7_0() { return cRequestKeyword_7_0; }
		
		//ARROW
		public RuleCall getARROWTerminalRuleCall_7_1() { return cARROWTerminalRuleCall_7_1; }
		
		//value=Literal
		public Assignment getValueAssignment_8() { return cValueAssignment_8; }
		
		//Literal
		public RuleCall getValueLiteralParserRuleCall_8_0() { return cValueLiteralParserRuleCall_8_0; }
		
		//RIGHT_BRACKET
		public RuleCall getRIGHT_BRACKETTerminalRuleCall_9() { return cRIGHT_BRACKETTerminalRuleCall_9; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cSLASHTerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final RuleCall cTWO_DOTSTerminalRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cQUESTION_MARKTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final RuleCall cMONEYTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final RuleCall cLEFT_BRACKETTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final RuleCall cRIGHT_BRACKETTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Parameter:
		//	{Parameter} (SLASH TWO_DOTS | QUESTION_MARK MONEY) LEFT_BRACKET name=ID RIGHT_BRACKET;
		@Override public ParserRule getRule() { return rule; }
		
		//{Parameter} (SLASH TWO_DOTS | QUESTION_MARK MONEY) LEFT_BRACKET name=ID RIGHT_BRACKET
		public Group getGroup() { return cGroup; }
		
		//{Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }
		
		//SLASH TWO_DOTS | QUESTION_MARK MONEY
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//SLASH TWO_DOTS
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//SLASH
		public RuleCall getSLASHTerminalRuleCall_1_0_0() { return cSLASHTerminalRuleCall_1_0_0; }
		
		//TWO_DOTS
		public RuleCall getTWO_DOTSTerminalRuleCall_1_0_1() { return cTWO_DOTSTerminalRuleCall_1_0_1; }
		
		//QUESTION_MARK MONEY
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//QUESTION_MARK
		public RuleCall getQUESTION_MARKTerminalRuleCall_1_1_0() { return cQUESTION_MARKTerminalRuleCall_1_1_0; }
		
		//MONEY
		public RuleCall getMONEYTerminalRuleCall_1_1_1() { return cMONEYTerminalRuleCall_1_1_1; }
		
		//LEFT_BRACKET
		public RuleCall getLEFT_BRACKETTerminalRuleCall_2() { return cLEFT_BRACKETTerminalRuleCall_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//RIGHT_BRACKET
		public RuleCall getRIGHT_BRACKETTerminalRuleCall_4() { return cRIGHT_BRACKETTerminalRuleCall_4; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class RestrictionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.Restriction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRestrictionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMockTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cEQUALTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cMockTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMockTypeMockTypesEnumRuleCall_3_0 = (RuleCall)cMockTypeAssignment_3.eContents().get(0);
		
		//Restriction:
		//	{Restriction}
		//	// (valid?='valid')?
		//	'mockType' EQUAL mockType=MockTypes;
		@Override public ParserRule getRule() { return rule; }
		
		//{Restriction} // (valid?='valid')?
		//'mockType' EQUAL mockType=MockTypes
		public Group getGroup() { return cGroup; }
		
		//{Restriction}
		public Action getRestrictionAction_0() { return cRestrictionAction_0; }
		
		//// (valid?='valid')?
		//'mockType'
		public Keyword getMockTypeKeyword_1() { return cMockTypeKeyword_1; }
		
		//EQUAL
		public RuleCall getEQUALTerminalRuleCall_2() { return cEQUALTerminalRuleCall_2; }
		
		//mockType=MockTypes
		public Assignment getMockTypeAssignment_3() { return cMockTypeAssignment_3; }
		
		//MockTypes
		public RuleCall getMockTypeMockTypesEnumRuleCall_3_0() { return cMockTypeMockTypesEnumRuleCall_3_0; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEntityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cLEFT_BRACKETTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cEntityAttributesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEntityAttributesDomainAttributeParserRuleCall_4_0 = (RuleCall)cEntityAttributesAssignment_4.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cEntityAttributesAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cEntityAttributesDomainAttributeParserRuleCall_6_0_0 = (RuleCall)cEntityAttributesAssignment_6_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final RuleCall cRIGHT_BRACKETTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//Entity:
		//	{Entity}
		//	'Entity' name=EString
		//	LEFT_BRACKET
		//	entityAttributes+=DomainAttribute SEMICOLON (entityAttributes+=DomainAttribute SEMICOLON)*
		//	RIGHT_BRACKET;
		@Override public ParserRule getRule() { return rule; }
		
		//{Entity} 'Entity' name=EString LEFT_BRACKET entityAttributes+=DomainAttribute SEMICOLON
		//(entityAttributes+=DomainAttribute SEMICOLON)* RIGHT_BRACKET
		public Group getGroup() { return cGroup; }
		
		//{Entity}
		public Action getEntityAction_0() { return cEntityAction_0; }
		
		//'Entity'
		public Keyword getEntityKeyword_1() { return cEntityKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//LEFT_BRACKET
		public RuleCall getLEFT_BRACKETTerminalRuleCall_3() { return cLEFT_BRACKETTerminalRuleCall_3; }
		
		//entityAttributes+=DomainAttribute
		public Assignment getEntityAttributesAssignment_4() { return cEntityAttributesAssignment_4; }
		
		//DomainAttribute
		public RuleCall getEntityAttributesDomainAttributeParserRuleCall_4_0() { return cEntityAttributesDomainAttributeParserRuleCall_4_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_5() { return cSEMICOLONTerminalRuleCall_5; }
		
		//(entityAttributes+=DomainAttribute SEMICOLON)*
		public Group getGroup_6() { return cGroup_6; }
		
		//entityAttributes+=DomainAttribute
		public Assignment getEntityAttributesAssignment_6_0() { return cEntityAttributesAssignment_6_0; }
		
		//DomainAttribute
		public RuleCall getEntityAttributesDomainAttributeParserRuleCall_6_0_0() { return cEntityAttributesDomainAttributeParserRuleCall_6_0_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_6_1() { return cSEMICOLONTerminalRuleCall_6_1; }
		
		//RIGHT_BRACKET
		public RuleCall getRIGHT_BRACKETTerminalRuleCall_7() { return cRIGHT_BRACKETTerminalRuleCall_7; }
	}
	public class Attribute_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.Attribute_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeAttributeTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cIsArrayAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cIsArraySQUARE_LEFT_BRACKETTerminalRuleCall_2_0_0 = (RuleCall)cIsArrayAssignment_2_0.eContents().get(0);
		private final RuleCall cSQUARE_RIGHT_BRACKETTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//Attribute_Impl Attribute:
		//	{Attribute} type=AttributeType (isArray?=SQUARE_LEFT_BRACKET SQUARE_RIGHT_BRACKET)? name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Attribute} type=AttributeType (isArray?=SQUARE_LEFT_BRACKET SQUARE_RIGHT_BRACKET)? name=EString
		public Group getGroup() { return cGroup; }
		
		//{Attribute}
		public Action getAttributeAction_0() { return cAttributeAction_0; }
		
		//type=AttributeType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//AttributeType
		public RuleCall getTypeAttributeTypeEnumRuleCall_1_0() { return cTypeAttributeTypeEnumRuleCall_1_0; }
		
		//(isArray?=SQUARE_LEFT_BRACKET SQUARE_RIGHT_BRACKET)?
		public Group getGroup_2() { return cGroup_2; }
		
		//isArray?=SQUARE_LEFT_BRACKET
		public Assignment getIsArrayAssignment_2_0() { return cIsArrayAssignment_2_0; }
		
		//SQUARE_LEFT_BRACKET
		public RuleCall getIsArraySQUARE_LEFT_BRACKETTerminalRuleCall_2_0_0() { return cIsArraySQUARE_LEFT_BRACKETTerminalRuleCall_2_0_0; }
		
		//SQUARE_RIGHT_BRACKET
		public RuleCall getSQUARE_RIGHT_BRACKETTerminalRuleCall_2_1() { return cSQUARE_RIGHT_BRACKETTerminalRuleCall_2_1; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
	}
	public class DomainAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.DomainAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDomainAttributeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeAttributeTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cIsArrayAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cIsArraySQUARE_LEFT_BRACKETTerminalRuleCall_2_0_0 = (RuleCall)cIsArrayAssignment_2_0.eContents().get(0);
		private final RuleCall cSQUARE_RIGHT_BRACKETTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cLEFT_PARENTHESISTerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cPrimaryKeyAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final Keyword cPrimaryKeyPKKeyword_4_1_0_0 = (Keyword)cPrimaryKeyAssignment_4_1_0.eContents().get(0);
		private final RuleCall cCOMMATerminalRuleCall_4_1_1 = (RuleCall)cGroup_4_1.eContents().get(1);
		private final Assignment cRestrictionsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cRestrictionsRestrictionParserRuleCall_4_2_0 = (RuleCall)cRestrictionsAssignment_4_2.eContents().get(0);
		private final RuleCall cRIGHT_PARENTHESISTerminalRuleCall_4_3 = (RuleCall)cGroup_4.eContents().get(3);
		
		//DomainAttribute:
		//	{DomainAttribute} type=AttributeType (isArray?=SQUARE_LEFT_BRACKET SQUARE_RIGHT_BRACKET)? name=EString
		//	(LEFT_PARENTHESIS (primaryKey?='PK' COMMA)? restrictions+=Restriction RIGHT_PARENTHESIS)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{DomainAttribute} type=AttributeType (isArray?=SQUARE_LEFT_BRACKET SQUARE_RIGHT_BRACKET)? name=EString (LEFT_PARENTHESIS
		//(primaryKey?='PK' COMMA)? restrictions+=Restriction RIGHT_PARENTHESIS)?
		public Group getGroup() { return cGroup; }
		
		//{DomainAttribute}
		public Action getDomainAttributeAction_0() { return cDomainAttributeAction_0; }
		
		//type=AttributeType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//AttributeType
		public RuleCall getTypeAttributeTypeEnumRuleCall_1_0() { return cTypeAttributeTypeEnumRuleCall_1_0; }
		
		//(isArray?=SQUARE_LEFT_BRACKET SQUARE_RIGHT_BRACKET)?
		public Group getGroup_2() { return cGroup_2; }
		
		//isArray?=SQUARE_LEFT_BRACKET
		public Assignment getIsArrayAssignment_2_0() { return cIsArrayAssignment_2_0; }
		
		//SQUARE_LEFT_BRACKET
		public RuleCall getIsArraySQUARE_LEFT_BRACKETTerminalRuleCall_2_0_0() { return cIsArraySQUARE_LEFT_BRACKETTerminalRuleCall_2_0_0; }
		
		//SQUARE_RIGHT_BRACKET
		public RuleCall getSQUARE_RIGHT_BRACKETTerminalRuleCall_2_1() { return cSQUARE_RIGHT_BRACKETTerminalRuleCall_2_1; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//(LEFT_PARENTHESIS (primaryKey?='PK' COMMA)? restrictions+=Restriction RIGHT_PARENTHESIS)?
		public Group getGroup_4() { return cGroup_4; }
		
		//LEFT_PARENTHESIS
		public RuleCall getLEFT_PARENTHESISTerminalRuleCall_4_0() { return cLEFT_PARENTHESISTerminalRuleCall_4_0; }
		
		//(primaryKey?='PK' COMMA)?
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//primaryKey?='PK'
		public Assignment getPrimaryKeyAssignment_4_1_0() { return cPrimaryKeyAssignment_4_1_0; }
		
		//'PK'
		public Keyword getPrimaryKeyPKKeyword_4_1_0_0() { return cPrimaryKeyPKKeyword_4_1_0_0; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_4_1_1() { return cCOMMATerminalRuleCall_4_1_1; }
		
		//restrictions+=Restriction
		public Assignment getRestrictionsAssignment_4_2() { return cRestrictionsAssignment_4_2; }
		
		//Restriction
		public RuleCall getRestrictionsRestrictionParserRuleCall_4_2_0() { return cRestrictionsRestrictionParserRuleCall_4_2_0; }
		
		//RIGHT_PARENTHESIS
		public RuleCall getRIGHT_PARENTHESISTerminalRuleCall_4_3() { return cRIGHT_PARENTHESISTerminalRuleCall_4_3; }
	}
	public class SimpleEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.SimpleEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSimpleEntityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSimpleEntityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cLEFT_BRACKETTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cEntityAttributesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEntityAttributesAttributeParserRuleCall_4_0 = (RuleCall)cEntityAttributesAssignment_4.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cEntityAttributesAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cEntityAttributesAttributeParserRuleCall_6_0_0 = (RuleCall)cEntityAttributesAssignment_6_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final RuleCall cRIGHT_BRACKETTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//SimpleEntity:
		//	{SimpleEntity}
		//	'SimpleEntity' name=EString
		//	LEFT_BRACKET
		//	entityAttributes+=Attribute SEMICOLON (entityAttributes+=Attribute SEMICOLON)*
		//	RIGHT_BRACKET;
		@Override public ParserRule getRule() { return rule; }
		
		//{SimpleEntity} 'SimpleEntity' name=EString LEFT_BRACKET entityAttributes+=Attribute SEMICOLON
		//(entityAttributes+=Attribute SEMICOLON)* RIGHT_BRACKET
		public Group getGroup() { return cGroup; }
		
		//{SimpleEntity}
		public Action getSimpleEntityAction_0() { return cSimpleEntityAction_0; }
		
		//'SimpleEntity'
		public Keyword getSimpleEntityKeyword_1() { return cSimpleEntityKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//LEFT_BRACKET
		public RuleCall getLEFT_BRACKETTerminalRuleCall_3() { return cLEFT_BRACKETTerminalRuleCall_3; }
		
		//entityAttributes+=Attribute
		public Assignment getEntityAttributesAssignment_4() { return cEntityAttributesAssignment_4; }
		
		//Attribute
		public RuleCall getEntityAttributesAttributeParserRuleCall_4_0() { return cEntityAttributesAttributeParserRuleCall_4_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_5() { return cSEMICOLONTerminalRuleCall_5; }
		
		//(entityAttributes+=Attribute SEMICOLON)*
		public Group getGroup_6() { return cGroup_6; }
		
		//entityAttributes+=Attribute
		public Assignment getEntityAttributesAssignment_6_0() { return cEntityAttributesAssignment_6_0; }
		
		//Attribute
		public RuleCall getEntityAttributesAttributeParserRuleCall_6_0_0() { return cEntityAttributesAttributeParserRuleCall_6_0_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_6_1() { return cSEMICOLONTerminalRuleCall_6_1; }
		
		//RIGHT_BRACKET
		public RuleCall getRIGHT_BRACKETTerminalRuleCall_7() { return cRIGHT_BRACKETTerminalRuleCall_7; }
	}
	
	public class AttributeTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.AttributeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStringStringKeyword_0_0 = (Keyword)cStringEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBooleanBooleanKeyword_1_0 = (Keyword)cBooleanEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cIntegerEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cIntegerIntegerKeyword_2_0 = (Keyword)cIntegerEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDoubleEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDoubleDoubleKeyword_3_0 = (Keyword)cDoubleEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDateEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDateDateKeyword_4_0 = (Keyword)cDateEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum AttributeType:
		//	string | boolean | integer | double | date;
		public EnumRule getRule() { return rule; }
		
		//string | boolean | integer | double | date
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//string
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_0() { return cStringEnumLiteralDeclaration_0; }
		
		//'string'
		public Keyword getStringStringKeyword_0_0() { return cStringStringKeyword_0_0; }
		
		//boolean
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_1() { return cBooleanEnumLiteralDeclaration_1; }
		
		//'boolean'
		public Keyword getBooleanBooleanKeyword_1_0() { return cBooleanBooleanKeyword_1_0; }
		
		//integer
		public EnumLiteralDeclaration getIntegerEnumLiteralDeclaration_2() { return cIntegerEnumLiteralDeclaration_2; }
		
		//'integer'
		public Keyword getIntegerIntegerKeyword_2_0() { return cIntegerIntegerKeyword_2_0; }
		
		//double
		public EnumLiteralDeclaration getDoubleEnumLiteralDeclaration_3() { return cDoubleEnumLiteralDeclaration_3; }
		
		//'double'
		public Keyword getDoubleDoubleKeyword_3_0() { return cDoubleDoubleKeyword_3_0; }
		
		//date
		public EnumLiteralDeclaration getDateEnumLiteralDeclaration_4() { return cDateEnumLiteralDeclaration_4; }
		
		//'date'
		public Keyword getDateDateKeyword_4_0() { return cDateDateKeyword_4_0; }
	}
	public class RelationalOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.RelationalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMinorEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMinorLessThanSignKeyword_0_0 = (Keyword)cMinorEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMinorEqualEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMinorEqualLessThanSignEqualsSignKeyword_1_0 = (Keyword)cMinorEqualEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEqualEqualsSignEqualsSignKeyword_2_0 = (Keyword)cEqualEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDifferentEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDifferentExclamationMarkEqualsSignKeyword_3_0 = (Keyword)cDifferentEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMajorEqualEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMajorEqualGreaterThanSignEqualsSignKeyword_4_0 = (Keyword)cMajorEqualEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cMajorEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cMajorGreaterThanSignKeyword_5_0 = (Keyword)cMajorEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cANDAmpersandAmpersandKeyword_6_0 = (Keyword)cANDEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cORVerticalLineVerticalLineKeyword_7_0 = (Keyword)cOREnumLiteralDeclaration_7.eContents().get(0);
		
		//enum RelationalOperator:
		//	Minor='<' | MinorEqual='<=' | Equal='==' | Different='!=' | MajorEqual='>=' | Major='>' | AND='&&' | OR='||';
		public EnumRule getRule() { return rule; }
		
		//Minor='<' | MinorEqual='<=' | Equal='==' | Different='!=' | MajorEqual='>=' | Major='>' | AND='&&' | OR='||'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Minor='<'
		public EnumLiteralDeclaration getMinorEnumLiteralDeclaration_0() { return cMinorEnumLiteralDeclaration_0; }
		
		//'<'
		public Keyword getMinorLessThanSignKeyword_0_0() { return cMinorLessThanSignKeyword_0_0; }
		
		//MinorEqual='<='
		public EnumLiteralDeclaration getMinorEqualEnumLiteralDeclaration_1() { return cMinorEqualEnumLiteralDeclaration_1; }
		
		//'<='
		public Keyword getMinorEqualLessThanSignEqualsSignKeyword_1_0() { return cMinorEqualLessThanSignEqualsSignKeyword_1_0; }
		
		//Equal='=='
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_2() { return cEqualEnumLiteralDeclaration_2; }
		
		//'=='
		public Keyword getEqualEqualsSignEqualsSignKeyword_2_0() { return cEqualEqualsSignEqualsSignKeyword_2_0; }
		
		//Different='!='
		public EnumLiteralDeclaration getDifferentEnumLiteralDeclaration_3() { return cDifferentEnumLiteralDeclaration_3; }
		
		//'!='
		public Keyword getDifferentExclamationMarkEqualsSignKeyword_3_0() { return cDifferentExclamationMarkEqualsSignKeyword_3_0; }
		
		//MajorEqual='>='
		public EnumLiteralDeclaration getMajorEqualEnumLiteralDeclaration_4() { return cMajorEqualEnumLiteralDeclaration_4; }
		
		//'>='
		public Keyword getMajorEqualGreaterThanSignEqualsSignKeyword_4_0() { return cMajorEqualGreaterThanSignEqualsSignKeyword_4_0; }
		
		//Major='>'
		public EnumLiteralDeclaration getMajorEnumLiteralDeclaration_5() { return cMajorEnumLiteralDeclaration_5; }
		
		//'>'
		public Keyword getMajorGreaterThanSignKeyword_5_0() { return cMajorGreaterThanSignKeyword_5_0; }
		
		//AND='&&'
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_6() { return cANDEnumLiteralDeclaration_6; }
		
		//'&&'
		public Keyword getANDAmpersandAmpersandKeyword_6_0() { return cANDAmpersandAmpersandKeyword_6_0; }
		
		//OR='||'
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_7() { return cOREnumLiteralDeclaration_7; }
		
		//'||'
		public Keyword getORVerticalLineVerticalLineKeyword_7_0() { return cORVerticalLineVerticalLineKeyword_7_0; }
	}
	public class MethodTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.MethodType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGETEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGETGETKeyword_0_0 = (Keyword)cGETEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPOSTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPOSTPOSTKeyword_1_0 = (Keyword)cPOSTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPUTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPUTPUTKeyword_2_0 = (Keyword)cPUTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDELETEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDELETEDELETEKeyword_3_0 = (Keyword)cDELETEEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum MethodType:
		//	GET | POST | PUT | DELETE;
		public EnumRule getRule() { return rule; }
		
		//GET | POST | PUT | DELETE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GET
		public EnumLiteralDeclaration getGETEnumLiteralDeclaration_0() { return cGETEnumLiteralDeclaration_0; }
		
		//'GET'
		public Keyword getGETGETKeyword_0_0() { return cGETGETKeyword_0_0; }
		
		//POST
		public EnumLiteralDeclaration getPOSTEnumLiteralDeclaration_1() { return cPOSTEnumLiteralDeclaration_1; }
		
		//'POST'
		public Keyword getPOSTPOSTKeyword_1_0() { return cPOSTPOSTKeyword_1_0; }
		
		//PUT
		public EnumLiteralDeclaration getPUTEnumLiteralDeclaration_2() { return cPUTEnumLiteralDeclaration_2; }
		
		//'PUT'
		public Keyword getPUTPUTKeyword_2_0() { return cPUTPUTKeyword_2_0; }
		
		//DELETE
		public EnumLiteralDeclaration getDELETEEnumLiteralDeclaration_3() { return cDELETEEnumLiteralDeclaration_3; }
		
		//'DELETE'
		public Keyword getDELETEDELETEKeyword_3_0() { return cDELETEDELETEKeyword_3_0; }
	}
	public class ParameterTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.ParameterType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPathEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPathPathKeyword_0_0 = (Keyword)cPathEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cQueryEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cQueryQueryKeyword_1_0 = (Keyword)cQueryEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ParameterType:
		//	path | query;
		public EnumRule getRule() { return rule; }
		
		//path | query
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//path
		public EnumLiteralDeclaration getPathEnumLiteralDeclaration_0() { return cPathEnumLiteralDeclaration_0; }
		
		//'path'
		public Keyword getPathPathKeyword_0_0() { return cPathPathKeyword_0_0; }
		
		//query
		public EnumLiteralDeclaration getQueryEnumLiteralDeclaration_1() { return cQueryEnumLiteralDeclaration_1; }
		
		//'query'
		public Keyword getQueryQueryKeyword_1_0() { return cQueryQueryKeyword_1_0; }
	}
	public class MockTypesElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.MockTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFirstNameTypeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFirstNameTypeFirstNameTypeKeyword_0_0 = (Keyword)cFirstNameTypeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFirstNameMaleTypeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFirstNameMaleTypeFirstNameMaleTypeKeyword_1_0 = (Keyword)cFirstNameMaleTypeEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFirstNameFemaleTypeEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFirstNameFemaleTypeFirstNameFemaleTypeKeyword_2_0 = (Keyword)cFirstNameFemaleTypeEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLastNameTypeEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLastNameTypeLastNameTypeKeyword_3_0 = (Keyword)cLastNameTypeEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFamilyNameTypeEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFamilyNameTypeFamilyNameTypeKeyword_4_0 = (Keyword)cFamilyNameTypeEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cFullNameTypeEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cFullNameTypeFullNameTypeKeyword_5_0 = (Keyword)cFullNameTypeEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cGenderTypeEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cGenderTypeGenderTypeKeyword_6_0 = (Keyword)cGenderTypeEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cEmailAddressTypeEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cEmailAddressTypeEmailAddressTypeKeyword_7_0 = (Keyword)cEmailAddressTypeEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cPhoneTypeEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cPhoneTypePhoneTypeKeyword_8_0 = (Keyword)cPhoneTypeEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cCountryTypeEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cCountryTypeCountryTypeKeyword_9_0 = (Keyword)cCountryTypeEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cCountryCodeTypeEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cCountryCodeTypeCountryCodeTypeKeyword_10_0 = (Keyword)cCountryCodeTypeEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cCityTypeEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cCityTypeCityTypeKeyword_11_0 = (Keyword)cCityTypeEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cRowNumberTypeEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cRowNumberTypeRowNumberTypeKeyword_12_0 = (Keyword)cRowNumberTypeEnumLiteralDeclaration_12.eContents().get(0);
		
		//enum MockTypes:
		//	FirstNameType | FirstNameMaleType | FirstNameFemaleType | LastNameType | FamilyNameType | FullNameType | GenderType |
		//	EmailAddressType | PhoneType | CountryType | CountryCodeType | CityType | RowNumberType;
		public EnumRule getRule() { return rule; }
		
		//FirstNameType | FirstNameMaleType | FirstNameFemaleType | LastNameType | FamilyNameType | FullNameType | GenderType |
		//EmailAddressType | PhoneType | CountryType | CountryCodeType | CityType | RowNumberType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FirstNameType
		public EnumLiteralDeclaration getFirstNameTypeEnumLiteralDeclaration_0() { return cFirstNameTypeEnumLiteralDeclaration_0; }
		
		//'FirstNameType'
		public Keyword getFirstNameTypeFirstNameTypeKeyword_0_0() { return cFirstNameTypeFirstNameTypeKeyword_0_0; }
		
		//FirstNameMaleType
		public EnumLiteralDeclaration getFirstNameMaleTypeEnumLiteralDeclaration_1() { return cFirstNameMaleTypeEnumLiteralDeclaration_1; }
		
		//'FirstNameMaleType'
		public Keyword getFirstNameMaleTypeFirstNameMaleTypeKeyword_1_0() { return cFirstNameMaleTypeFirstNameMaleTypeKeyword_1_0; }
		
		//FirstNameFemaleType
		public EnumLiteralDeclaration getFirstNameFemaleTypeEnumLiteralDeclaration_2() { return cFirstNameFemaleTypeEnumLiteralDeclaration_2; }
		
		//'FirstNameFemaleType'
		public Keyword getFirstNameFemaleTypeFirstNameFemaleTypeKeyword_2_0() { return cFirstNameFemaleTypeFirstNameFemaleTypeKeyword_2_0; }
		
		//LastNameType
		public EnumLiteralDeclaration getLastNameTypeEnumLiteralDeclaration_3() { return cLastNameTypeEnumLiteralDeclaration_3; }
		
		//'LastNameType'
		public Keyword getLastNameTypeLastNameTypeKeyword_3_0() { return cLastNameTypeLastNameTypeKeyword_3_0; }
		
		//FamilyNameType
		public EnumLiteralDeclaration getFamilyNameTypeEnumLiteralDeclaration_4() { return cFamilyNameTypeEnumLiteralDeclaration_4; }
		
		//'FamilyNameType'
		public Keyword getFamilyNameTypeFamilyNameTypeKeyword_4_0() { return cFamilyNameTypeFamilyNameTypeKeyword_4_0; }
		
		//FullNameType
		public EnumLiteralDeclaration getFullNameTypeEnumLiteralDeclaration_5() { return cFullNameTypeEnumLiteralDeclaration_5; }
		
		//'FullNameType'
		public Keyword getFullNameTypeFullNameTypeKeyword_5_0() { return cFullNameTypeFullNameTypeKeyword_5_0; }
		
		//GenderType
		public EnumLiteralDeclaration getGenderTypeEnumLiteralDeclaration_6() { return cGenderTypeEnumLiteralDeclaration_6; }
		
		//'GenderType'
		public Keyword getGenderTypeGenderTypeKeyword_6_0() { return cGenderTypeGenderTypeKeyword_6_0; }
		
		//EmailAddressType
		public EnumLiteralDeclaration getEmailAddressTypeEnumLiteralDeclaration_7() { return cEmailAddressTypeEnumLiteralDeclaration_7; }
		
		//'EmailAddressType'
		public Keyword getEmailAddressTypeEmailAddressTypeKeyword_7_0() { return cEmailAddressTypeEmailAddressTypeKeyword_7_0; }
		
		//PhoneType
		public EnumLiteralDeclaration getPhoneTypeEnumLiteralDeclaration_8() { return cPhoneTypeEnumLiteralDeclaration_8; }
		
		//'PhoneType'
		public Keyword getPhoneTypePhoneTypeKeyword_8_0() { return cPhoneTypePhoneTypeKeyword_8_0; }
		
		//CountryType
		public EnumLiteralDeclaration getCountryTypeEnumLiteralDeclaration_9() { return cCountryTypeEnumLiteralDeclaration_9; }
		
		//'CountryType'
		public Keyword getCountryTypeCountryTypeKeyword_9_0() { return cCountryTypeCountryTypeKeyword_9_0; }
		
		//CountryCodeType
		public EnumLiteralDeclaration getCountryCodeTypeEnumLiteralDeclaration_10() { return cCountryCodeTypeEnumLiteralDeclaration_10; }
		
		//'CountryCodeType'
		public Keyword getCountryCodeTypeCountryCodeTypeKeyword_10_0() { return cCountryCodeTypeCountryCodeTypeKeyword_10_0; }
		
		//CityType
		public EnumLiteralDeclaration getCityTypeEnumLiteralDeclaration_11() { return cCityTypeEnumLiteralDeclaration_11; }
		
		//'CityType'
		public Keyword getCityTypeCityTypeKeyword_11_0() { return cCityTypeCityTypeKeyword_11_0; }
		
		//RowNumberType
		public EnumLiteralDeclaration getRowNumberTypeEnumLiteralDeclaration_12() { return cRowNumberTypeEnumLiteralDeclaration_12; }
		
		//'RowNumberType'
		public Keyword getRowNumberTypeRowNumberTypeKeyword_12_0() { return cRowNumberTypeRowNumberTypeKeyword_12_0; }
	}
	
	private final AutomatedRestTestingElements pAutomatedRestTesting;
	private final ElementElements pElement;
	private final AttributeElements pAttribute;
	private final EStringElements pEString;
	private final RestServiceElements pRestService;
	private final TestElements pTest;
	private final AssertionElements pAssertion;
	private final QualifiedNameElements pQualifiedName;
	private final ExpressionElements pExpression;
	private final LiteralElements pLiteral;
	private final IntegerLiteralElements pIntegerLiteral;
	private final StringLiteralElements pStringLiteral;
	private final ElementLiteralElements pElementLiteral;
	private final MappingElementElements pMappingElement;
	private final AttributeTypeElements eAttributeType;
	private final RelationalOperatorElements eRelationalOperator;
	private final MethodTypeElements eMethodType;
	private final ParameterElements pParameter;
	private final EBooleanElements pEBoolean;
	private final RestrictionElements pRestriction;
	private final ParameterTypeElements eParameterType;
	private final MockTypesElements eMockTypes;
	private final EntityElements pEntity;
	private final Attribute_ImplElements pAttribute_Impl;
	private final DomainAttributeElements pDomainAttribute;
	private final SimpleEntityElements pSimpleEntity;
	private final TerminalRule tARROW;
	private final TerminalRule tEQUAL;
	private final TerminalRule tSEMICOLON;
	private final TerminalRule tLEFT_PARENTHESIS;
	private final TerminalRule tRIGHT_PARENTHESIS;
	private final TerminalRule tLEFT_BRACKET;
	private final TerminalRule tRIGHT_BRACKET;
	private final TerminalRule tSQUARE_LEFT_BRACKET;
	private final TerminalRule tSQUARE_RIGHT_BRACKET;
	private final TerminalRule tCOMMA;
	private final TerminalRule tSLASH;
	private final TerminalRule tDOT;
	private final TerminalRule tTWO_DOTS;
	private final TerminalRule tMONEY;
	private final TerminalRule tQUESTION_MARK;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AutomatedRestTestingGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAutomatedRestTesting = new AutomatedRestTestingElements();
		this.pElement = new ElementElements();
		this.pAttribute = new AttributeElements();
		this.pEString = new EStringElements();
		this.pRestService = new RestServiceElements();
		this.pTest = new TestElements();
		this.pAssertion = new AssertionElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pExpression = new ExpressionElements();
		this.pLiteral = new LiteralElements();
		this.pIntegerLiteral = new IntegerLiteralElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pElementLiteral = new ElementLiteralElements();
		this.pMappingElement = new MappingElementElements();
		this.eAttributeType = new AttributeTypeElements();
		this.eRelationalOperator = new RelationalOperatorElements();
		this.eMethodType = new MethodTypeElements();
		this.pParameter = new ParameterElements();
		this.pEBoolean = new EBooleanElements();
		this.pRestriction = new RestrictionElements();
		this.eParameterType = new ParameterTypeElements();
		this.eMockTypes = new MockTypesElements();
		this.pEntity = new EntityElements();
		this.pAttribute_Impl = new Attribute_ImplElements();
		this.pDomainAttribute = new DomainAttributeElements();
		this.pSimpleEntity = new SimpleEntityElements();
		this.tARROW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.ARROW");
		this.tEQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.EQUAL");
		this.tSEMICOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.SEMICOLON");
		this.tLEFT_PARENTHESIS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.LEFT_PARENTHESIS");
		this.tRIGHT_PARENTHESIS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.RIGHT_PARENTHESIS");
		this.tLEFT_BRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.LEFT_BRACKET");
		this.tRIGHT_BRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.RIGHT_BRACKET");
		this.tSQUARE_LEFT_BRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.SQUARE_LEFT_BRACKET");
		this.tSQUARE_RIGHT_BRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.SQUARE_RIGHT_BRACKET");
		this.tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.COMMA");
		this.tSLASH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.SLASH");
		this.tDOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.DOT");
		this.tTWO_DOTS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.TWO_DOTS");
		this.tMONEY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.MONEY");
		this.tQUESTION_MARK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.automatedresttesting.AutomatedRestTesting.QUESTION_MARK");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.automatedresttesting.AutomatedRestTesting".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//AutomatedRestTesting:
	//	{AutomatedRestTesting}
	//	'apiURL' EQUAL url=EString SEMICOLON (dataElements+=Element dataElements+=Element*)? (services+=RestService
	//	services+=RestService*)? (tests+=Test tests+=Test*)?;
	public AutomatedRestTestingElements getAutomatedRestTestingAccess() {
		return pAutomatedRestTesting;
	}
	
	public ParserRule getAutomatedRestTestingRule() {
		return getAutomatedRestTestingAccess().getRule();
	}
	
	//Element:
	//	Entity | SimpleEntity;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Attribute:
	//	Attribute_Impl;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//RestService:
	//	method=MethodType name=EString
	//	LEFT_BRACKET
	//	'URL' EQUAL uri=SLASH EString (SLASH EString | parameters+=Parameter)* SEMICOLON ('Request'
	//	LEFT_BRACKET
	//	'Type' EQUAL request=[Element|EString] (SQUARE_LEFT_BRACKET SQUARE_RIGHT_BRACKET)? SEMICOLON
	//	RIGHT_BRACKET)?
	//	'Response'
	//	LEFT_BRACKET
	//	'Type' EQUAL response=[Element|EString] (SQUARE_LEFT_BRACKET SQUARE_RIGHT_BRACKET)? SEMICOLON
	//	RIGHT_BRACKET
	//	RIGHT_BRACKET;
	public RestServiceElements getRestServiceAccess() {
		return pRestService;
	}
	
	public ParserRule getRestServiceRule() {
		return getRestServiceAccess().getRule();
	}
	
	//Test:
	//	'Test'
	//	name=EString
	//	LEFT_BRACKET
	//	'service' EQUAL service=[RestService|EString] SEMICOLON ('description' EQUAL description=EString SEMICOLON)?
	//	('Mapping' SQUARE_LEFT_BRACKET mappings+=MappingElement mappings+=MappingElement* SQUARE_RIGHT_BRACKET)?
	//	'Assertions' LEFT_BRACKET (assertions+=Assertion SEMICOLON)+ RIGHT_BRACKET
	//	RIGHT_BRACKET;
	public TestElements getTestAccess() {
		return pTest;
	}
	
	public ParserRule getTestRule() {
		return getTestAccess().getRule();
	}
	
	//Assertion:
	//	'response' ((DOT | ARROW)? dataToTest=[Element|QualifiedName])? condition=Expression;
	public AssertionElements getAssertionAccess() {
		return pAssertion;
	}
	
	public ParserRule getAssertionRule() {
		return getAssertionAccess().getRule();
	}
	
	//QualifiedName:
	//	ID (DOT ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Expression:
	//	relationalOperator=RelationalOperator (('parameter' (DOT | ARROW))? expectedValue=Literal)?;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Literal:
	//	ElementLiteral | StringLiteral | IntegerLiteral;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//IntegerLiteral:
	//	value=INT;
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return pIntegerLiteral;
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}
	
	//StringLiteral:
	//	value=EString;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//ElementLiteral:
	//	value=[Element|QualifiedName];
	public ElementLiteralElements getElementLiteralAccess() {
		return pElementLiteral;
	}
	
	public ParserRule getElementLiteralRule() {
		return getElementLiteralAccess().getRule();
	}
	
	//MappingElement:
	//	LEFT_BRACKET
	//	'parameter' EQUAL parameter=[Element|QualifiedName] COMMA
	//	'value' EQUAL ('request' ARROW)? value=Literal
	//	RIGHT_BRACKET;
	public MappingElementElements getMappingElementAccess() {
		return pMappingElement;
	}
	
	public ParserRule getMappingElementRule() {
		return getMappingElementAccess().getRule();
	}
	
	//enum AttributeType:
	//	string | boolean | integer | double | date;
	public AttributeTypeElements getAttributeTypeAccess() {
		return eAttributeType;
	}
	
	public EnumRule getAttributeTypeRule() {
		return getAttributeTypeAccess().getRule();
	}
	
	//enum RelationalOperator:
	//	Minor='<' | MinorEqual='<=' | Equal='==' | Different='!=' | MajorEqual='>=' | Major='>' | AND='&&' | OR='||';
	public RelationalOperatorElements getRelationalOperatorAccess() {
		return eRelationalOperator;
	}
	
	public EnumRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}
	
	//enum MethodType:
	//	GET | POST | PUT | DELETE;
	public MethodTypeElements getMethodTypeAccess() {
		return eMethodType;
	}
	
	public EnumRule getMethodTypeRule() {
		return getMethodTypeAccess().getRule();
	}
	
	//Parameter:
	//	{Parameter} (SLASH TWO_DOTS | QUESTION_MARK MONEY) LEFT_BRACKET name=ID RIGHT_BRACKET;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//Restriction:
	//	{Restriction}
	//	// (valid?='valid')?
	//	'mockType' EQUAL mockType=MockTypes;
	public RestrictionElements getRestrictionAccess() {
		return pRestriction;
	}
	
	public ParserRule getRestrictionRule() {
		return getRestrictionAccess().getRule();
	}
	
	//enum ParameterType:
	//	path | query;
	public ParameterTypeElements getParameterTypeAccess() {
		return eParameterType;
	}
	
	public EnumRule getParameterTypeRule() {
		return getParameterTypeAccess().getRule();
	}
	
	//enum MockTypes:
	//	FirstNameType | FirstNameMaleType | FirstNameFemaleType | LastNameType | FamilyNameType | FullNameType | GenderType |
	//	EmailAddressType | PhoneType | CountryType | CountryCodeType | CityType | RowNumberType;
	public MockTypesElements getMockTypesAccess() {
		return eMockTypes;
	}
	
	public EnumRule getMockTypesRule() {
		return getMockTypesAccess().getRule();
	}
	
	//Entity:
	//	{Entity}
	//	'Entity' name=EString
	//	LEFT_BRACKET
	//	entityAttributes+=DomainAttribute SEMICOLON (entityAttributes+=DomainAttribute SEMICOLON)*
	//	RIGHT_BRACKET;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Attribute_Impl Attribute:
	//	{Attribute} type=AttributeType (isArray?=SQUARE_LEFT_BRACKET SQUARE_RIGHT_BRACKET)? name=EString;
	public Attribute_ImplElements getAttribute_ImplAccess() {
		return pAttribute_Impl;
	}
	
	public ParserRule getAttribute_ImplRule() {
		return getAttribute_ImplAccess().getRule();
	}
	
	//DomainAttribute:
	//	{DomainAttribute} type=AttributeType (isArray?=SQUARE_LEFT_BRACKET SQUARE_RIGHT_BRACKET)? name=EString
	//	(LEFT_PARENTHESIS (primaryKey?='PK' COMMA)? restrictions+=Restriction RIGHT_PARENTHESIS)?;
	public DomainAttributeElements getDomainAttributeAccess() {
		return pDomainAttribute;
	}
	
	public ParserRule getDomainAttributeRule() {
		return getDomainAttributeAccess().getRule();
	}
	
	//SimpleEntity:
	//	{SimpleEntity}
	//	'SimpleEntity' name=EString
	//	LEFT_BRACKET
	//	entityAttributes+=Attribute SEMICOLON (entityAttributes+=Attribute SEMICOLON)*
	//	RIGHT_BRACKET;
	public SimpleEntityElements getSimpleEntityAccess() {
		return pSimpleEntity;
	}
	
	public ParserRule getSimpleEntityRule() {
		return getSimpleEntityAccess().getRule();
	}
	
	//terminal ARROW:
	//	"->";
	public TerminalRule getARROWRule() {
		return tARROW;
	}
	
	//terminal EQUAL:
	//	"=";
	public TerminalRule getEQUALRule() {
		return tEQUAL;
	}
	
	//terminal SEMICOLON:
	//	";";
	public TerminalRule getSEMICOLONRule() {
		return tSEMICOLON;
	}
	
	//terminal LEFT_PARENTHESIS:
	//	"(";
	public TerminalRule getLEFT_PARENTHESISRule() {
		return tLEFT_PARENTHESIS;
	}
	
	//terminal RIGHT_PARENTHESIS:
	//	")";
	public TerminalRule getRIGHT_PARENTHESISRule() {
		return tRIGHT_PARENTHESIS;
	}
	
	//terminal LEFT_BRACKET:
	//	"{";
	public TerminalRule getLEFT_BRACKETRule() {
		return tLEFT_BRACKET;
	}
	
	//terminal RIGHT_BRACKET:
	//	"}";
	public TerminalRule getRIGHT_BRACKETRule() {
		return tRIGHT_BRACKET;
	}
	
	//terminal SQUARE_LEFT_BRACKET:
	//	"[";
	public TerminalRule getSQUARE_LEFT_BRACKETRule() {
		return tSQUARE_LEFT_BRACKET;
	}
	
	//terminal SQUARE_RIGHT_BRACKET:
	//	"]";
	public TerminalRule getSQUARE_RIGHT_BRACKETRule() {
		return tSQUARE_RIGHT_BRACKET;
	}
	
	//terminal COMMA:
	//	",";
	public TerminalRule getCOMMARule() {
		return tCOMMA;
	}
	
	//terminal SLASH:
	//	"/";
	public TerminalRule getSLASHRule() {
		return tSLASH;
	}
	
	//terminal DOT:
	//	".";
	public TerminalRule getDOTRule() {
		return tDOT;
	}
	
	//terminal TWO_DOTS:
	//	":";
	public TerminalRule getTWO_DOTSRule() {
		return tTWO_DOTS;
	}
	
	//terminal MONEY:
	//	"$";
	public TerminalRule getMONEYRule() {
		return tMONEY;
	}
	
	//terminal QUESTION_MARK:
	//	"?";
	public TerminalRule getQUESTION_MARKRule() {
		return tQUESTION_MARK;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
