// automatically generated by Xtext
grammar org.xtext.example.automatedresttesting.AutomatedRestTesting with org.eclipse.xtext.common.Terminals

import "http://www.example.org/automatedrestesting" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

AutomatedRestTesting returns AutomatedRestTesting:
	{AutomatedRestTesting}
	'apiURL' EQUAL (url=EString) SEMICOLON
		(dataElements+=Element (dataElements+=Element)*)?
		(services+=RestService (services+=RestService)*)?
		(tests+=Test (tests+=Test)*)?;

Element returns Element:
	Entity | SimpleEntity;

Attribute returns Attribute:
	Attribute_Impl;

EString returns ecore::EString:
	STRING | ID;

RestService returns RestService:
	(method=MethodType) name=EString
	LEFT_BRACKET
		'URL' EQUAL uri=SLASH EString (SLASH EString | parameters+=Parameter)* SEMICOLON
		('Request' 
			LEFT_BRACKET
			'Type' EQUAL request=([Element|EString]) (SQUARE_LEFT_BRACKET  SQUARE_RIGHT_BRACKET)? SEMICOLON
			RIGHT_BRACKET
		)?
		'Response' 
		LEFT_BRACKET
			'Type' EQUAL response=[Element|EString] (SQUARE_LEFT_BRACKET  SQUARE_RIGHT_BRACKET)? SEMICOLON
		RIGHT_BRACKET
	RIGHT_BRACKET;

Test returns Test:
	'Test'
	name=EString
	LEFT_BRACKET
		'service' EQUAL service=[RestService|EString] SEMICOLON
		('description' EQUAL description=EString SEMICOLON)?
		(Mapping)?
		'Assertions' LEFT_BRACKET (assertions+=Assertion SEMICOLON)+ RIGHT_BRACKET 
	RIGHT_BRACKET;


Assertion returns Assertion:
	'response' ((DOT | ARROW)? (dataToTest=[Element]))? condition=Expression
;

Expression returns Expression:
	relationalOperator=RelationalOperator (('parameter' (DOT | ARROW))? expectedValue=EString)?
;

Mapping: 
	'Mapping' SQUARE_LEFT_BRACKET MappingParameter (MappingParameter)* SQUARE_RIGHT_BRACKET
;

MappingParameter:
	LEFT_BRACKET 'parameter' EQUAL EString COMMA 'value' EQUAL ('request' ARROW)? EString RIGHT_BRACKET
;

enum AttributeType returns AttributeType:
				string = 'string' | boolean = 'boolean' | integer = 'integer' | double = 'double' | date = 'date';

enum RelationalOperator returns RelationalOperator:
				Minor = '<' | MinorEqual = '<=' | Equal = '==' | Different = '!=' | MajorEqual = '>=' | Major = '>' | AND = '&&' | OR = '||';

enum MethodType returns MethodType:
				GET = 'GET' | POST = 'POST' | PUT = 'PUT' | DELETE = 'DELETE';

Parameter returns Parameter:
	{Parameter}
	(SLASH TWO_DOTS | QUESTION_MARK MONEY) LEFT_BRACKET name=EString RIGHT_BRACKET
	;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

Restriction returns Restriction:
	{Restriction}
	// (valid?='valid')?
	'mockType' EQUAL mockType=MockTypes;

enum ParameterType returns ParameterType:
				path = 'path' | query = 'query';

enum MockTypes returns MockTypes:
				FirstNameType = 'FirstNameType' | FirstNameMaleType = 'FirstNameMaleType' | FirstNameFemaleType = 'FirstNameFemaleType' | LastNameType = 'LastNameType' | FamilyNameType = 'FamilyNameType' | FullNameType = 'FullNameType' | GenderType = 'GenderType' | EmailAddressType = 'EmailAddressType' | PhoneType = 'PhoneType' | CountryType = 'CountryType' | CountryCodeType = 'CountryCodeType' | CityType = 'CityType' | RowNumberType = 'RowNumberType';

Entity returns Entity:
	{Entity}
	'Entity' name=EString
	LEFT_BRACKET
		entityAttributes+=DomainAttribute SEMICOLON (entityAttributes+=DomainAttribute SEMICOLON)*
	RIGHT_BRACKET;

Attribute_Impl returns Attribute:
	{Attribute}
	(type=AttributeType) (isArray?=SQUARE_LEFT_BRACKET  SQUARE_RIGHT_BRACKET)? name=EString;

DomainAttribute returns DomainAttribute:
	{DomainAttribute} 
	(type=AttributeType) (isArray?=SQUARE_LEFT_BRACKET  SQUARE_RIGHT_BRACKET)? name=EString
	(LEFT_PARENTHESIS
		(primaryKey?='PK' COMMA)? (restrictions+=Restriction)
	RIGHT_PARENTHESIS)?;

SimpleEntity returns SimpleEntity:
	{SimpleEntity}
	'SimpleEntity' name=EString
	LEFT_BRACKET 
		entityAttributes+=Attribute SEMICOLON (entityAttributes+=Attribute SEMICOLON)* 
	RIGHT_BRACKET;
	
// Terminals

terminal ARROW : "->";

terminal EQUAL : "=";

terminal SEMICOLON : ";";

terminal LEFT_PARENTHESIS : "(";

terminal RIGHT_PARENTHESIS : ")";

terminal LEFT_BRACKET : "{";

terminal RIGHT_BRACKET : "}";

terminal SQUARE_LEFT_BRACKET : "[";

terminal SQUARE_RIGHT_BRACKET : "]";

terminal COMMA : ",";

terminal SLASH : "/";

terminal DOT : ".";

terminal TWO_DOTS : ":";

terminal MONEY : "$";

terminal QUESTION_MARK : "?";
