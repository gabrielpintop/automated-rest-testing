// automatically generated by Xtext
grammar org.xtext.example.automatedresttesting.AutomatedRestTesting with org.eclipse.xtext.common.Terminals

import "http://www.example.org/automatedrestesting" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

AutomatedRestTesting returns AutomatedRestTesting:
	{AutomatedRestTesting}
	'apiURL' EQUAL (url=EString) SEMICOLON
		(dataElements+=Element (dataElements+=Element)*)?
		(services+=RestService (services+=RestService)*)?
		(tests+=Test (tests+=Test)*)?;

Element returns Element:
	Entity | SimpleEntity;

Attribute returns Attribute:
	Attribute_Impl;

EString returns ecore::EString:
	STRING | ID;

Test returns Test:
	'Test'
	name=EString
	LEFT_BRACKET
		('description' description=EString)?
		'assertions' LEFT_BRACKET assertions+=Assertion ( COMMA assertions+=Assertion)* RIGHT_BRACKET 
	RIGHT_BRACKET;

RestService returns RestService:
	(method=MethodType) name=EString
	LEFT_BRACKET
		'URL' EQUAL uri=SLASH EString (SLASH EString | parameters+=Parameter)* SEMICOLON
		('Request' 
			LEFT_BRACKET
			'Type' EQUAL (request=([Element|EString])) ('[]')? SEMICOLON
			RIGHT_BRACKET
		)?
		'Response' 
		LEFT_BRACKET
			'Type' EQUAL response=[Element|EString] ('[]')? SEMICOLON
		RIGHT_BRACKET
	RIGHT_BRACKET;
	
Assertion returns Assertion:
	'Assertion'
	LEFT_BRACKET
		'dataToTest' dataToTest=[Element|EString]
		'condition' condition=Expression
	RIGHT_BRACKET;

Expression returns Expression:
	{Expression}
	'Expression'
	LEFT_BRACKET
		('type' type=AttributeType)?
		('expectedValue' expectedValue=EString)?
		('relationalOperator' relationalOperator=RelationalOperator)?
	RIGHT_BRACKET;

enum AttributeType returns AttributeType:
				string = 'string' | boolean = 'boolean' | integer = 'integer' | double = 'double' | date = 'date';

enum RelationalOperator returns RelationalOperator:
				Minor = 'Minor' | MinorEqual = 'MinorEqual' | Equal = 'Equal' | Different = 'Different' | MajorEqual = 'MajorEqual' | Major = 'Major' | AND = 'AND' | OR = 'OR';

enum MethodType returns MethodType:
				GET = 'GET' | POST = 'POST' | PUT = 'PUT' | DELETE = 'DELETE';

Parameter returns Parameter:
	{Parameter}
	(SLASH TWO_DOTS | QUESTION_MARK MONEY) LEFT_BRACKET name=EString RIGHT_BRACKET
	//LEFT_BRACKET
	//	('value' value=EString)?
	//	('type' type=AttributeType)?
	//	('paramType' paramType=ParameterType)?
	//	('restrictions' LEFT_BRACKET restrictions+=Restriction ( COMMA restrictions+=Restriction)* RIGHT_BRACKET )?
	// RIGHT_BRACKET
	;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

Restriction returns Restriction:
	{Restriction}
	// (valid?='valid')?
	'mockType' EQUAL mockType=MockTypes;

enum ParameterType returns ParameterType:
				path = 'path' | query = 'query';

enum MockTypes returns MockTypes:
				FirstNameType = 'FirstNameType' | FirstNameMaleType = 'FirstNameMaleType' | FirstNameFemaleType = 'FirstNameFemaleType' | LastNameType = 'LastNameType' | FamilyNameType = 'FamilyNameType' | FullNameType = 'FullNameType' | GenderType = 'GenderType' | EmailAddressType = 'EmailAddressType' | PhoneType = 'PhoneType' | CountryType = 'CountryType' | CountryCodeType = 'CountryCodeType' | CityType = 'CityType' | RowNumberType = 'RowNumberType';

Entity returns Entity:
	{Entity}
	'Entity' name=EString
	LEFT_BRACKET
		entityAttributes+=DomainAttribute SEMICOLON (entityAttributes+=DomainAttribute SEMICOLON)*
	RIGHT_BRACKET;

Attribute_Impl returns Attribute:
	{Attribute}
	(type=AttributeType) (isArray?='[]')? name=EString;

DomainAttribute returns DomainAttribute:
	{DomainAttribute} 
	// ('value' value=EString)?
	(type=AttributeType) (isArray?='[]')? name=EString
	(LEFT_PARENTHESIS
		(primaryKey?='PK' COMMA)? (restrictions+=Restriction)
	RIGHT_PARENTHESIS)?;

SimpleEntity returns SimpleEntity:
	{SimpleEntity}
	'SimpleEntity' name=EString
	LEFT_BRACKET 
		entityAttributes+=Attribute SEMICOLON (entityAttributes+=Attribute SEMICOLON)* 
	RIGHT_BRACKET;
	
// Terminals

terminal EQUAL : "=";

terminal SEMICOLON : ";";

terminal LEFT_PARENTHESIS : "(";

terminal RIGHT_PARENTHESIS : ")";

terminal LEFT_BRACKET : "{";

terminal RIGHT_BRACKET : "}";

terminal COMMA : ",";

terminal SLASH : "/";

terminal TWO_DOTS : ":";

terminal MONEY : "$";

terminal QUESTION_MARK : "?";
