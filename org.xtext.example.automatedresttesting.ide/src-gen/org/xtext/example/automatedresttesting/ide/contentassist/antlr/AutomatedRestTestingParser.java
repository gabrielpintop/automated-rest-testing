/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.automatedresttesting.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.automatedresttesting.ide.contentassist.antlr.internal.InternalAutomatedRestTestingParser;
import org.xtext.example.automatedresttesting.services.AutomatedRestTestingGrammarAccess;

public class AutomatedRestTestingParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(AutomatedRestTestingGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, AutomatedRestTestingGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getRestServiceAccess().getAlternatives_7(), "rule__RestService__Alternatives_7");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives_1_0_1(), "rule__Expression__Alternatives_1_0_1");
			builder.put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getAssertionTypeAccess().getAlternatives(), "rule__AssertionType__Alternatives");
			builder.put(grammarAccess.getAttributeTypeAccess().getAlternatives(), "rule__AttributeType__Alternatives");
			builder.put(grammarAccess.getRelationalOperatorAccess().getAlternatives(), "rule__RelationalOperator__Alternatives");
			builder.put(grammarAccess.getMethodTypeAccess().getAlternatives(), "rule__MethodType__Alternatives");
			builder.put(grammarAccess.getParameterTypeAccess().getAlternatives(), "rule__ParameterType__Alternatives");
			builder.put(grammarAccess.getMockTypesAccess().getAlternatives(), "rule__MockTypes__Alternatives");
			builder.put(grammarAccess.getAutomatedRestTestingAccess().getGroup(), "rule__AutomatedRestTesting__Group__0");
			builder.put(grammarAccess.getAutomatedRestTestingAccess().getGroup_5(), "rule__AutomatedRestTesting__Group_5__0");
			builder.put(grammarAccess.getAutomatedRestTestingAccess().getGroup_6(), "rule__AutomatedRestTesting__Group_6__0");
			builder.put(grammarAccess.getAutomatedRestTestingAccess().getGroup_7(), "rule__AutomatedRestTesting__Group_7__0");
			builder.put(grammarAccess.getRestServiceAccess().getGroup(), "rule__RestService__Group__0");
			builder.put(grammarAccess.getRestServiceAccess().getGroup_7_0(), "rule__RestService__Group_7_0__0");
			builder.put(grammarAccess.getRestServiceAccess().getGroup_9(), "rule__RestService__Group_9__0");
			builder.put(grammarAccess.getRestServiceAccess().getGroup_9_5(), "rule__RestService__Group_9_5__0");
			builder.put(grammarAccess.getRestServiceAccess().getGroup_15(), "rule__RestService__Group_15__0");
			builder.put(grammarAccess.getTestAccess().getGroup(), "rule__Test__Group__0");
			builder.put(grammarAccess.getTestAccess().getGroup_7(), "rule__Test__Group_7__0");
			builder.put(grammarAccess.getTestAccess().getGroup_8(), "rule__Test__Group_8__0");
			builder.put(grammarAccess.getTestAccess().getGroup_11(), "rule__Test__Group_11__0");
			builder.put(grammarAccess.getAssertionAccess().getGroup(), "rule__Assertion__Group__0");
			builder.put(grammarAccess.getAssertionAccess().getGroup_0(), "rule__Assertion__Group_0__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_1_0(), "rule__Expression__Group_1_0__0");
			builder.put(grammarAccess.getMappingElementAccess().getGroup(), "rule__MappingElement__Group__0");
			builder.put(grammarAccess.getMappingElementAccess().getGroup_7(), "rule__MappingElement__Group_7__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getRestrictionAccess().getGroup(), "rule__Restriction__Group__0");
			builder.put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
			builder.put(grammarAccess.getEntityAccess().getGroup_6(), "rule__Entity__Group_6__0");
			builder.put(grammarAccess.getAttribute_ImplAccess().getGroup(), "rule__Attribute_Impl__Group__0");
			builder.put(grammarAccess.getAttribute_ImplAccess().getGroup_2(), "rule__Attribute_Impl__Group_2__0");
			builder.put(grammarAccess.getDomainAttributeAccess().getGroup(), "rule__DomainAttribute__Group__0");
			builder.put(grammarAccess.getDomainAttributeAccess().getGroup_2(), "rule__DomainAttribute__Group_2__0");
			builder.put(grammarAccess.getDomainAttributeAccess().getGroup_4(), "rule__DomainAttribute__Group_4__0");
			builder.put(grammarAccess.getDomainAttributeAccess().getGroup_4_1(), "rule__DomainAttribute__Group_4_1__0");
			builder.put(grammarAccess.getSimpleEntityAccess().getGroup(), "rule__SimpleEntity__Group__0");
			builder.put(grammarAccess.getSimpleEntityAccess().getGroup_6(), "rule__SimpleEntity__Group_6__0");
			builder.put(grammarAccess.getAutomatedRestTestingAccess().getUrlAssignment_3(), "rule__AutomatedRestTesting__UrlAssignment_3");
			builder.put(grammarAccess.getAutomatedRestTestingAccess().getDataElementsAssignment_5_0(), "rule__AutomatedRestTesting__DataElementsAssignment_5_0");
			builder.put(grammarAccess.getAutomatedRestTestingAccess().getDataElementsAssignment_5_1(), "rule__AutomatedRestTesting__DataElementsAssignment_5_1");
			builder.put(grammarAccess.getAutomatedRestTestingAccess().getServicesAssignment_6_0(), "rule__AutomatedRestTesting__ServicesAssignment_6_0");
			builder.put(grammarAccess.getAutomatedRestTestingAccess().getServicesAssignment_6_1(), "rule__AutomatedRestTesting__ServicesAssignment_6_1");
			builder.put(grammarAccess.getAutomatedRestTestingAccess().getTestsAssignment_7_0(), "rule__AutomatedRestTesting__TestsAssignment_7_0");
			builder.put(grammarAccess.getAutomatedRestTestingAccess().getTestsAssignment_7_1(), "rule__AutomatedRestTesting__TestsAssignment_7_1");
			builder.put(grammarAccess.getRestServiceAccess().getMethodAssignment_0(), "rule__RestService__MethodAssignment_0");
			builder.put(grammarAccess.getRestServiceAccess().getNameAssignment_1(), "rule__RestService__NameAssignment_1");
			builder.put(grammarAccess.getRestServiceAccess().getUriAssignment_5(), "rule__RestService__UriAssignment_5");
			builder.put(grammarAccess.getRestServiceAccess().getParametersAssignment_7_1(), "rule__RestService__ParametersAssignment_7_1");
			builder.put(grammarAccess.getRestServiceAccess().getRequestAssignment_9_4(), "rule__RestService__RequestAssignment_9_4");
			builder.put(grammarAccess.getRestServiceAccess().getResponseAssignment_14(), "rule__RestService__ResponseAssignment_14");
			builder.put(grammarAccess.getTestAccess().getNameAssignment_1(), "rule__Test__NameAssignment_1");
			builder.put(grammarAccess.getTestAccess().getServiceAssignment_5(), "rule__Test__ServiceAssignment_5");
			builder.put(grammarAccess.getTestAccess().getDescriptionAssignment_7_2(), "rule__Test__DescriptionAssignment_7_2");
			builder.put(grammarAccess.getTestAccess().getMappingsAssignment_8_2(), "rule__Test__MappingsAssignment_8_2");
			builder.put(grammarAccess.getTestAccess().getMappingsAssignment_8_3(), "rule__Test__MappingsAssignment_8_3");
			builder.put(grammarAccess.getTestAccess().getAssertionsAssignment_11_0(), "rule__Test__AssertionsAssignment_11_0");
			builder.put(grammarAccess.getAssertionAccess().getAssertionTypeAssignment_0_0(), "rule__Assertion__AssertionTypeAssignment_0_0");
			builder.put(grammarAccess.getAssertionAccess().getDataToTestAssignment_0_1(), "rule__Assertion__DataToTestAssignment_0_1");
			builder.put(grammarAccess.getAssertionAccess().getConditionAssignment_1(), "rule__Assertion__ConditionAssignment_1");
			builder.put(grammarAccess.getExpressionAccess().getRelationalOperatorAssignment_0(), "rule__Expression__RelationalOperatorAssignment_0");
			builder.put(grammarAccess.getExpressionAccess().getExpectedValueAssignment_1_1(), "rule__Expression__ExpectedValueAssignment_1_1");
			builder.put(grammarAccess.getIntegerLiteralAccess().getValueAssignment(), "rule__IntegerLiteral__ValueAssignment");
			builder.put(grammarAccess.getStringLiteralAccess().getValueAssignment(), "rule__StringLiteral__ValueAssignment");
			builder.put(grammarAccess.getElementLiteralAccess().getValueAssignment(), "rule__ElementLiteral__ValueAssignment");
			builder.put(grammarAccess.getMappingElementAccess().getParameterAssignment_3(), "rule__MappingElement__ParameterAssignment_3");
			builder.put(grammarAccess.getMappingElementAccess().getValueAssignment_8(), "rule__MappingElement__ValueAssignment_8");
			builder.put(grammarAccess.getParameterAccess().getParamTypeAssignment_1(), "rule__Parameter__ParamTypeAssignment_1");
			builder.put(grammarAccess.getParameterAccess().getValueAssignment_3(), "rule__Parameter__ValueAssignment_3");
			builder.put(grammarAccess.getRestrictionAccess().getMockTypeAssignment_3(), "rule__Restriction__MockTypeAssignment_3");
			builder.put(grammarAccess.getEntityAccess().getNameAssignment_2(), "rule__Entity__NameAssignment_2");
			builder.put(grammarAccess.getEntityAccess().getEntityAttributesAssignment_4(), "rule__Entity__EntityAttributesAssignment_4");
			builder.put(grammarAccess.getEntityAccess().getEntityAttributesAssignment_6_0(), "rule__Entity__EntityAttributesAssignment_6_0");
			builder.put(grammarAccess.getAttribute_ImplAccess().getTypeAssignment_1(), "rule__Attribute_Impl__TypeAssignment_1");
			builder.put(grammarAccess.getAttribute_ImplAccess().getIsArrayAssignment_2_0(), "rule__Attribute_Impl__IsArrayAssignment_2_0");
			builder.put(grammarAccess.getAttribute_ImplAccess().getNameAssignment_3(), "rule__Attribute_Impl__NameAssignment_3");
			builder.put(grammarAccess.getDomainAttributeAccess().getTypeAssignment_1(), "rule__DomainAttribute__TypeAssignment_1");
			builder.put(grammarAccess.getDomainAttributeAccess().getIsArrayAssignment_2_0(), "rule__DomainAttribute__IsArrayAssignment_2_0");
			builder.put(grammarAccess.getDomainAttributeAccess().getNameAssignment_3(), "rule__DomainAttribute__NameAssignment_3");
			builder.put(grammarAccess.getDomainAttributeAccess().getPrimaryKeyAssignment_4_1_0(), "rule__DomainAttribute__PrimaryKeyAssignment_4_1_0");
			builder.put(grammarAccess.getDomainAttributeAccess().getRestrictionsAssignment_4_2(), "rule__DomainAttribute__RestrictionsAssignment_4_2");
			builder.put(grammarAccess.getSimpleEntityAccess().getNameAssignment_2(), "rule__SimpleEntity__NameAssignment_2");
			builder.put(grammarAccess.getSimpleEntityAccess().getEntityAttributesAssignment_4(), "rule__SimpleEntity__EntityAttributesAssignment_4");
			builder.put(grammarAccess.getSimpleEntityAccess().getEntityAttributesAssignment_6_0(), "rule__SimpleEntity__EntityAttributesAssignment_6_0");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private AutomatedRestTestingGrammarAccess grammarAccess;

	@Override
	protected InternalAutomatedRestTestingParser createParser() {
		InternalAutomatedRestTestingParser result = new InternalAutomatedRestTestingParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public AutomatedRestTestingGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(AutomatedRestTestingGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
