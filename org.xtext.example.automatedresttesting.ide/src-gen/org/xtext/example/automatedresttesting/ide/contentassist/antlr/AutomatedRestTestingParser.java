/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.automatedresttesting.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.example.automatedresttesting.ide.contentassist.antlr.internal.InternalAutomatedRestTestingParser;
import org.xtext.example.automatedresttesting.services.AutomatedRestTestingGrammarAccess;

public class AutomatedRestTestingParser extends AbstractContentAssistParser {

	@Inject
	private AutomatedRestTestingGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalAutomatedRestTestingParser createParser() {
		InternalAutomatedRestTestingParser result = new InternalAutomatedRestTestingParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getRestServiceAccess().getAlternatives_7(), "rule__RestService__Alternatives_7");
					put(grammarAccess.getParameterAccess().getAlternatives_1(), "rule__Parameter__Alternatives_1");
					put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
					put(grammarAccess.getAttributeTypeAccess().getAlternatives(), "rule__AttributeType__Alternatives");
					put(grammarAccess.getRelationalOperatorAccess().getAlternatives(), "rule__RelationalOperator__Alternatives");
					put(grammarAccess.getMethodTypeAccess().getAlternatives(), "rule__MethodType__Alternatives");
					put(grammarAccess.getParameterTypeAccess().getAlternatives(), "rule__ParameterType__Alternatives");
					put(grammarAccess.getMockTypesAccess().getAlternatives(), "rule__MockTypes__Alternatives");
					put(grammarAccess.getAutomatedRestTestingAccess().getGroup(), "rule__AutomatedRestTesting__Group__0");
					put(grammarAccess.getAutomatedRestTestingAccess().getGroup_5(), "rule__AutomatedRestTesting__Group_5__0");
					put(grammarAccess.getAutomatedRestTestingAccess().getGroup_6(), "rule__AutomatedRestTesting__Group_6__0");
					put(grammarAccess.getAutomatedRestTestingAccess().getGroup_7(), "rule__AutomatedRestTesting__Group_7__0");
					put(grammarAccess.getTestAccess().getGroup(), "rule__Test__Group__0");
					put(grammarAccess.getTestAccess().getGroup_3(), "rule__Test__Group_3__0");
					put(grammarAccess.getTestAccess().getGroup_7(), "rule__Test__Group_7__0");
					put(grammarAccess.getRestServiceAccess().getGroup(), "rule__RestService__Group__0");
					put(grammarAccess.getRestServiceAccess().getGroup_7_0(), "rule__RestService__Group_7_0__0");
					put(grammarAccess.getRestServiceAccess().getGroup_9(), "rule__RestService__Group_9__0");
					put(grammarAccess.getAssertionAccess().getGroup(), "rule__Assertion__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_3(), "rule__Expression__Group_3__0");
					put(grammarAccess.getExpressionAccess().getGroup_4(), "rule__Expression__Group_4__0");
					put(grammarAccess.getExpressionAccess().getGroup_5(), "rule__Expression__Group_5__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getParameterAccess().getGroup_1_0(), "rule__Parameter__Group_1_0__0");
					put(grammarAccess.getParameterAccess().getGroup_1_1(), "rule__Parameter__Group_1_1__0");
					put(grammarAccess.getRestrictionAccess().getGroup(), "rule__Restriction__Group__0");
					put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
					put(grammarAccess.getEntityAccess().getGroup_6(), "rule__Entity__Group_6__0");
					put(grammarAccess.getAttribute_ImplAccess().getGroup(), "rule__Attribute_Impl__Group__0");
					put(grammarAccess.getDomainAttributeAccess().getGroup(), "rule__DomainAttribute__Group__0");
					put(grammarAccess.getDomainAttributeAccess().getGroup_4(), "rule__DomainAttribute__Group_4__0");
					put(grammarAccess.getDomainAttributeAccess().getGroup_4_1(), "rule__DomainAttribute__Group_4_1__0");
					put(grammarAccess.getSimpleEntityAccess().getGroup(), "rule__SimpleEntity__Group__0");
					put(grammarAccess.getSimpleEntityAccess().getGroup_6(), "rule__SimpleEntity__Group_6__0");
					put(grammarAccess.getAutomatedRestTestingAccess().getUrlAssignment_3(), "rule__AutomatedRestTesting__UrlAssignment_3");
					put(grammarAccess.getAutomatedRestTestingAccess().getDataElementsAssignment_5_0(), "rule__AutomatedRestTesting__DataElementsAssignment_5_0");
					put(grammarAccess.getAutomatedRestTestingAccess().getDataElementsAssignment_5_1(), "rule__AutomatedRestTesting__DataElementsAssignment_5_1");
					put(grammarAccess.getAutomatedRestTestingAccess().getServicesAssignment_6_0(), "rule__AutomatedRestTesting__ServicesAssignment_6_0");
					put(grammarAccess.getAutomatedRestTestingAccess().getServicesAssignment_6_1(), "rule__AutomatedRestTesting__ServicesAssignment_6_1");
					put(grammarAccess.getAutomatedRestTestingAccess().getTestsAssignment_7_0(), "rule__AutomatedRestTesting__TestsAssignment_7_0");
					put(grammarAccess.getAutomatedRestTestingAccess().getTestsAssignment_7_1(), "rule__AutomatedRestTesting__TestsAssignment_7_1");
					put(grammarAccess.getTestAccess().getNameAssignment_1(), "rule__Test__NameAssignment_1");
					put(grammarAccess.getTestAccess().getDescriptionAssignment_3_1(), "rule__Test__DescriptionAssignment_3_1");
					put(grammarAccess.getTestAccess().getAssertionsAssignment_6(), "rule__Test__AssertionsAssignment_6");
					put(grammarAccess.getTestAccess().getAssertionsAssignment_7_1(), "rule__Test__AssertionsAssignment_7_1");
					put(grammarAccess.getRestServiceAccess().getMethodAssignment_0(), "rule__RestService__MethodAssignment_0");
					put(grammarAccess.getRestServiceAccess().getNameAssignment_1(), "rule__RestService__NameAssignment_1");
					put(grammarAccess.getRestServiceAccess().getUriAssignment_5(), "rule__RestService__UriAssignment_5");
					put(grammarAccess.getRestServiceAccess().getParametersAssignment_7_1(), "rule__RestService__ParametersAssignment_7_1");
					put(grammarAccess.getRestServiceAccess().getRequestAssignment_9_4(), "rule__RestService__RequestAssignment_9_4");
					put(grammarAccess.getRestServiceAccess().getResponseAssignment_14(), "rule__RestService__ResponseAssignment_14");
					put(grammarAccess.getAssertionAccess().getDataToTestAssignment_3(), "rule__Assertion__DataToTestAssignment_3");
					put(grammarAccess.getAssertionAccess().getConditionAssignment_5(), "rule__Assertion__ConditionAssignment_5");
					put(grammarAccess.getExpressionAccess().getTypeAssignment_3_1(), "rule__Expression__TypeAssignment_3_1");
					put(grammarAccess.getExpressionAccess().getExpectedValueAssignment_4_1(), "rule__Expression__ExpectedValueAssignment_4_1");
					put(grammarAccess.getExpressionAccess().getRelationalOperatorAssignment_5_1(), "rule__Expression__RelationalOperatorAssignment_5_1");
					put(grammarAccess.getParameterAccess().getNameAssignment_3(), "rule__Parameter__NameAssignment_3");
					put(grammarAccess.getRestrictionAccess().getMockTypeAssignment_3(), "rule__Restriction__MockTypeAssignment_3");
					put(grammarAccess.getEntityAccess().getNameAssignment_2(), "rule__Entity__NameAssignment_2");
					put(grammarAccess.getEntityAccess().getEntityAttributesAssignment_4(), "rule__Entity__EntityAttributesAssignment_4");
					put(grammarAccess.getEntityAccess().getEntityAttributesAssignment_6_0(), "rule__Entity__EntityAttributesAssignment_6_0");
					put(grammarAccess.getAttribute_ImplAccess().getTypeAssignment_1(), "rule__Attribute_Impl__TypeAssignment_1");
					put(grammarAccess.getAttribute_ImplAccess().getIsArrayAssignment_2(), "rule__Attribute_Impl__IsArrayAssignment_2");
					put(grammarAccess.getAttribute_ImplAccess().getNameAssignment_3(), "rule__Attribute_Impl__NameAssignment_3");
					put(grammarAccess.getDomainAttributeAccess().getTypeAssignment_1(), "rule__DomainAttribute__TypeAssignment_1");
					put(grammarAccess.getDomainAttributeAccess().getIsArrayAssignment_2(), "rule__DomainAttribute__IsArrayAssignment_2");
					put(grammarAccess.getDomainAttributeAccess().getNameAssignment_3(), "rule__DomainAttribute__NameAssignment_3");
					put(grammarAccess.getDomainAttributeAccess().getPrimaryKeyAssignment_4_1_0(), "rule__DomainAttribute__PrimaryKeyAssignment_4_1_0");
					put(grammarAccess.getDomainAttributeAccess().getRestrictionsAssignment_4_2(), "rule__DomainAttribute__RestrictionsAssignment_4_2");
					put(grammarAccess.getSimpleEntityAccess().getNameAssignment_2(), "rule__SimpleEntity__NameAssignment_2");
					put(grammarAccess.getSimpleEntityAccess().getEntityAttributesAssignment_4(), "rule__SimpleEntity__EntityAttributesAssignment_4");
					put(grammarAccess.getSimpleEntityAccess().getEntityAttributesAssignment_6_0(), "rule__SimpleEntity__EntityAttributesAssignment_6_0");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalAutomatedRestTestingParser typedParser = (InternalAutomatedRestTestingParser) parser;
			typedParser.entryRuleAutomatedRestTesting();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public AutomatedRestTestingGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(AutomatedRestTestingGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
