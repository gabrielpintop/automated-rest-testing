import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testdata.TestDataFactory.findTestData
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import com.kms.katalon.core.checkpoint.Checkpoint as Checkpoint
import com.kms.katalon.core.cucumber.keyword.CucumberBuiltinKeywords as CucumberKW
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.model.FailureHandling as FailureHandling
import com.kms.katalon.core.testcase.TestCase as TestCase
import com.kms.katalon.core.testdata.TestData as TestData
import com.kms.katalon.core.testobject.TestObject as TestObject
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import internal.GlobalVariable as GlobalVariable
[%
	var elements = ', [';
	var added = false;
	var service = test.service;
	var parameters = service.uri.urlExpression.select(ue | ue.type().name == 'Parameter');
	if(parameters.size() > 0) {
		added = true;
		var parameter;
		for(i in 0.to(parameters.size() - 1)) {
			parameter = parameters[i];
			elements += "('" + parameter.name + "') : " + '"$' + parameter.name + '"';
			
			if(i < parameters.size() - 1) {
				elements += ', ';
			}
		}
	}
	
	if((service.method.name == 'POST' or service.method.name == 'PUT') and service.request.isDefined()) {
		var attribute;
		var attributes = service.request.entityAttributes.size();
		if(attributes.size() > 0) {
			added = true;
			for(i in 0.to(attributes.size() -1)) {
	   			attribute = service.request.entityAttributes[i];
	   			elements += "('" + attribute.name + "') : " + '"$' + attribute.name + '"';
				if(i < attributes.size() - 1) {
					elements += ', ';
				}
   			}
		}
	}
	
	elements += ']';
	
	if(not added) {
		elements = '';
	}
	
%]

response = WS.sendRequest(findTestObject('[%=service.name%]'[%=elements%]))

[%
	var assertions = test.assertions;
	var operator;
	if(assertions.size() > 0) {
		for(assertion in assertions) {
			operator = assertion.condition.relationalOperator;
			if(assertion.assertionType.name == 'response') {
				if(operator.name == 'Equal' and assertion.condition.expectedValue.type().name == 'ElementLiteral') { 
%]
WS.verifyElementPropertyValue(response, '[%=assertion.dataToTest.name %]', [%=assertion.condition.expectedValue.value.name%])
[%
				}
				else if(operator.name == 'Equal') { 
%]
WS.verifyElementPropertyValue(response, '[%=assertion.dataToTest.name %]', '[%=assertion.condition.expectedValue.value%]')
[%
				}
			}
			if(assertion.assertionType.name == 'information') {
				if(operator.name == 'Equal') {
%]
WS.verifyResponseStatusCode(response, [%=assertion.condition.expectedValue.value%])
[%
				} else {
%]
List json = new JsonSlurper().parseText(response.getResponseText())
				[%
					var result;
					switch(operator.name) {
						case 'MajorEqual':
							result = 'GreaterThanOrEqual';
						case 'Major':
							result = 'GreaterThan';
						case 'Minor':
							result = 'LessThan';
						case 'MinorEqual':
							result = 'LessThanOrEqual';
					}
%]
WS.verify[%=result%](json.size(), [%=assertion.condition.expectedValue.value%])
[%
				}
			}
		}
	}
%]

