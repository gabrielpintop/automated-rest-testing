apiURL="http://127.0.0.1/api/v1";
Entity Country{
    string id (PK,mockType=RowNumberType);
    string shortName ( mockType=CountryCodeType);
    string name (mockType=CountryType);
    string native;
    string phone (mockType=PhoneType);
    string continent;
    string capital ( mockType=CityType);
    string currency;
    string[] languages;
    string emoji;
    string emojiU;
}

Entity Student{
    string id (PK,mockType=RowNumberType);
    string first_name ( mockType=FirstNameType);    
    string last_name ( mockType=LastNameType);    
     string gender ( mockType=GenderType);    
    string code;
    string country ( mockType=CountryType);
    string city ( mockType=CityType);
    string university;
}
SimpleEntity Respuesta{
    
    string status;
    string message;
}
GET GetCountries{
                
    URL = /countries;    
    
    Response {
        Type = Country[];
    }    
}

GET GetCountryByShort{
                
    URL = /countries/:{country};
    
    Response {
        Type = Country;
    }    
}
GET GetStatesByCountry{
                
    URL = /countries/:{country}/states;
    
    Response {
        Type = Country[];
    }    
}
GET GETCitiesByCountry{
                
    URL = /countries/:{country}/cities?${state};
    
    Response {
        Type = Country[];
    }    
}

GET GetStudents{
                
    URL = /students;    
    
    Response {
        Type = Student[];
    }    
}

POST AddStudent{
                
    URL = /students;
    Request {
        Type = Student;
    }
    Response {
        Type = Respuesta;
    }    
}
GET GetStudent{
                
    URL = /students/:{id};
    
    Response {
        Type = Student;
    }    
}
DELETE DeleteStudent{
                
    URL = /students/:{id};
    
    Response {
        Type = Respuesta;
    }    
}
Test p1{
    service = GetCountries;
    description ="Probar que retorne 200";    
    Assertions{
        response.Respuesta.status == 200; 
    }
}

Test p2{
    service = GetCountryByShort;
    description ="No existe el país";
    Mapping[
        {parameter=GetCountryByShort.country,value="BR"}
    ]
    Assertions{
        response.Respuesta.status == 200; 
        response->Country.shortName == parameter.GetCountryByShort.country;
        response->Country.name=='Brazil';
    }
}
Test p3{
    service = GETCitiesByCountry;
    description ="Retorna una lista de ciudades";
    Mapping[
        {parameter=GETCitiesByCountry.country,value="BR"}
        {parameter=GETCitiesByCountry.state,value="Parana"}
    ]
    Assertions{
        response.Respuesta.status == 200; 
        response.Country.id >= 10 ;
    }
}

Test p4{
    service = AddStudent;
    description ="Agrega un estudiante";    
    Assertions{
        response.Respuesta.status == 200; 
        response->Respuesta.status == 'success';
    }
}

Test p4{
    service = DeleteStudent;
    description ="Elimina un estudiante";
    Mapping[
        {parameter=DeleteStudent.id,value=request->Student.id}
    ]
    Assertions{
        response.Respuesta.status == 200; 
        response->Respuesta.status == 'success';
    }
}
